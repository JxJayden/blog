<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[JS高程学习6：函数]]></title>
      <url>http://blog.jxdjayden.cn/2016/09/21/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A0/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A06_%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionName</span>(<span class="params">arg0,arg1,….argN</span>)</span>&#123;</div><div class="line"> statements</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//示例</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name,message</span>)</span>&#123;</div><div class="line">alert(<span class="string">"hello"</span> + name + <span class="string">","</span> + message);</div><div class="line"></div><div class="line"><span class="comment">// 调用函数</span></div><div class="line">sayHi(<span class="string">"jayden"</span>,<span class="string">"how are you?"</span>);</div></pre></td></tr></table></figure>
<p>严格模式对函数有一些限制</p>
<ol>
<li>不能把函数命名为 eval 或 arguments</li>
<li>不能把参数命名为 eval 或 arguments</li>
<li>不能出现两个命名参数同名的情况</li>
</ol>
<p>如果发生以上情况，就会导致语法错误，代码无法执行。</p>
<h2 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h2><p>当一个函数被调用的时候，会从第一个语句开始执行，直到遇到关闭函数体的 ｝时结束，然后函数把控制权交还给调用该函数的程序。<br>return 语句可以用来使函数提前返回。当 return 被执行时，函数立即返回而不再执行余下的语句。一个函数总会返回一个值，如果没有指定返回值，则返回 undefined。<br>如果函数调用时在前面加上了 new 前缀，且返回值不是一个对象，则返回 this （该新对象）。</p>
<h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><p>ECMAScript 函数的参数与其他语言中的大有不同，在 ECMAScript 函数中不介意传递进来多少个参数，也不在意传递的参数是什么数据类型。在函数体内可以通过 arguments 对象来访问这个参数数组，从而获取传递给函数的每个参数。<br><strong>注意：arguments 只是和数组类似。并不是 Array 的实例。</strong><br>命名的参数只提供便利，但不是必须的。上面的函数可以重写为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">"hello"</span>+<span class="built_in">arguments</span>[<span class="number">0</span>]+<span class="string">","</span>+<span class="built_in">arguments</span>[<span class="number">1</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过访问 arguments 对象的 length 属性可以获知有多少个参数传递给了函数。arguments 对象可以和命名参数共同使用。同时，arguments 的值永远与对应的命名参数的值保持一致。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">  <span class="built_in">arguments</span>[<span class="number">1</span>] = <span class="number">10</span>;</div><div class="line">  alert(<span class="built_in">arguments</span>[<span class="number">0</span>] + num2);</div><div class="line">&#125;</div><div class="line"></div><div class="line">add(<span class="number">10</span>,<span class="number">5</span>); <span class="comment">// 20</span></div></pre></td></tr></table></figure>
<p>关于参数还有最后一点：没有被传递值的命名参数将被赋予 undefined 值。<br><strong>注意：ECMAScript 中的所有参数传递的都是值，不可能通过引用来传递参数。</strong></p>
<h2 id="没有重载"><a href="#没有重载" class="headerlink" title="没有重载"></a>没有重载</h2><p>ECMAScript 函数不能像其他语言一样实现重载。（因为不存在函数签名）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addSomething</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> num + <span class="number">100</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addSomething</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> num + <span class="number">200</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">addSomething(<span class="number">100</span>); <span class="comment">// 300</span></div></pre></td></tr></table></figure>
<p>函数 addSomething() 被定义了两次，所以后定义的函数会覆盖先定义的函数。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mac 的神兵利器]]></title>
      <url>http://blog.jxdjayden.cn/2016/09/08/software/mac%E7%9A%84%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>这个帖子用来记录自己的 mac 安装的各种软件。(持续更新)</p>
<h2 id="终端工具"><a href="#终端工具" class="headerlink" title="终端工具"></a>终端工具</h2><ol>
<li><a href="http://iterm2.com/" target="_blank" rel="external">iTerm2</a>：替代原生终端的强大工具。</li>
<li><a href="https://fishshell.com/" target="_blank" rel="external">fish</a>：a command line shell for the 90s。</li>
<li><a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">homebrew</a>：OS X 不可或缺的套件管理器，可以方便地让你用命令行安装很多东西。</li>
</ol>
<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><ol>
<li><a href="https://www.sublimetext.com/" target="_blank" rel="external">sublime text 3</a>：很好用的编辑器，从 windows 开始就一直用这个。<br>插件：待更新</li>
</ol>
<a id="more"></a>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li><a href="https://github.com/ZzzM/HostToolforMac" target="_blank" rel="external">HostsTool</a>：获取 hosts 更新的工具，你懂的～</li>
<li><a href="https://github.com/oldj/SwitchHosts" target="_blank" rel="external">SwitchHosts!</a>：方便的快速的 hosts 管理工具。</li>
<li><a href="http://zipzapmac.com/go2shell" target="_blank" rel="external">Go2Shell</a>：让你方便地在 finder 中打开 shell。</li>
<li><a href="https://kapeli.com/dash" target="_blank" rel="external">Dash</a>：强大的 api 离线文档查看软件，你不给它捐钱都不好意思。</li>
<li><a href="https://www.getpostman.com/" target="_blank" rel="external">Postman</a>：很强大的接口测试工具。</li>
<li><a href="https://www.sourcetreeapp.com" target="_blank" rel="external">SourceTree</a>：git 图形工具，可以用来做简单的 git 管理。</li>
<li><a href="https://www.sketchapp.com/" target="_blank" rel="external">Sketch</a>：很好用的切图工具。</li>
<li><a href="https://weflow.io/" target="_blank" rel="external">WeFlow</a>：一个高效、强大、跨平台的前端开发工作流工具。</li>
<li><a href="https://www.zennaware.com/cornerstone/store.php" target="_blank" rel="external">Cornerstone</a>：颜值很高的 svn 管理工具 。</li>
</ol>
<h2 id="效率、笔记及脑图工具"><a href="#效率、笔记及脑图工具" class="headerlink" title="效率、笔记及脑图工具"></a>效率、笔记及脑图工具</h2><ol>
<li><a href="https://www.alfredapp.com/" target="_blank" rel="external">Alfred3</a>：不解释</li>
<li><a href="https://www.typora.io/" target="_blank" rel="external">Typora</a>：很好看的 markdown 编辑软件</li>
<li><a href="https://leanote.com/" target="_blank" rel="external">Leanote</a>：笔记管理软件，支持 markdown ，支持 windows、mac、iOS 平台。</li>
<li><a href="https://www.mediaatelier.com/CheatSheet/" target="_blank" rel="external">CheatSheet</a>：快捷键查看工具。</li>
<li><a href="https://github.com/fikovnik/ShiftIt" target="_blank" rel="external">Shiftlt</a>：很好用的窗口管理工具。</li>
<li><a href="https://mindnode.com/" target="_blank" rel="external">Mindnode</a>：很好看的思维导图软件，iOS 最近限免中。</li>
<li><a href="http://www.xmindchina.net/" target="_blank" rel="external">XMind</a>：思维导图编辑软件。</li>
</ol>
<h2 id="阅读工具及邮箱"><a href="#阅读工具及邮箱" class="headerlink" title="阅读工具及邮箱"></a>阅读工具及邮箱</h2><ol>
<li><a href="https://itunes.apple.com/us/app/kindle-read-books-ebooks-magazines/id302584613?mt=8" target="_blank" rel="external">kindle</a>：不用多说，多看书～</li>
<li><a href="http://reederapp.com/beta3/" target="_blank" rel="external">reeder3</a>：设计超好看的 RSS 阅读器。</li>
<li><a href="https://getpocket.com/a/" target="_blank" rel="external">pocket</a>：read it later～</li>
<li><a href="https://inbox.google.com/" target="_blank" rel="external">inbox web</a>：gmail，可惜只有 web 版，没有 mac 的 app。</li>
<li><a href="https://www.google.com/calendar" target="_blank" rel="external">google 日历</a>：～～～不解释。</li>
</ol>
<h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><ol>
<li><a href="https://www.trankynam.com/xtrafinder/" target="_blank" rel="external">XtraFinder</a>：finder 扩展软件，很好用。</li>
<li><a href="https://www.dashlane.com/" target="_blank" rel="external">Dashlane</a>：密码管理软件，设计的很棒。免费账户够用了。</li>
<li><a href="https://itunes.apple.com/us/app/istatistica/id1025822138?mt=12" target="_blank" rel="external">iStatistica</a>：系统监视软件，比 iStat 好看。可以在 app store 搜索。</li>
<li><a href="https://aria2.github.io/" target="_blank" rel="external">aria2c</a>：很好用的命令行下载工具。</li>
<li><a href="http://cidian.youdao.com/index-mac.html" target="_blank" rel="external">有道词典</a>：划词翻译～</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6 的 generator 函数]]></title>
      <url>http://blog.jxdjayden.cn/2016/08/30/ES6/ES6%E7%9A%84generator%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>最近公司让我整理一些文档， 其中有些代码涉及到 ES6 的 generator（生成器）函数，还有 co 函数库，thunkify 函数库等，当时查了一些资料来理解。现在把这些东西整理一下。</p>
<h2 id="ES6-生成器（Generators）简介"><a href="#ES6-生成器（Generators）简介" class="headerlink" title="ES6 生成器（Generators）简介"></a>ES6 生成器（Generators）简介</h2><p>语法：</p>
<p><code>function* name([param[, param[, ... param]]]) { statements }</code></p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">test</span>(<span class="params">title</span>)</span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">"你好"</span>;</div><div class="line">  <span class="keyword">if</span>(title)&#123;</div><div class="line">    <span class="keyword">yield</span> title;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">yield</span> <span class="string">"bye"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><code>function*</code> 声明定义一个<strong>generator（生成器）函数</strong>，返回一个 <code>Generator</code> 对象。什么是 <code>generator</code> 函数呢？</p>
<blockquote>
<p><strong>生成器</strong>是一种可以从中退出并在之后重新进入的函数。生成器的环境（绑定的变量）会在每次执行后被保存，下次进入时可继续使用。 —— MDN</p>
</blockquote>
<p>来看一下上面定义的 test 函数被调用时发生了什么？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> t = test(<span class="string">'jayden'</span>); <span class="comment">//undefined 什么都没发生</span></div><div class="line">t.next(); </div><div class="line">&gt; <span class="built_in">Object</span> &#123;value: <span class="string">"你好"</span>, done: <span class="literal">false</span>&#125;</div><div class="line">t.next();</div><div class="line">&gt; <span class="built_in">Object</span> &#123;value: <span class="string">"jayden"</span>, done: <span class="literal">false</span>&#125;</div><div class="line">t.next();</div><div class="line">&gt; <span class="built_in">Object</span> &#123;value: <span class="string">"bye"</span>, done: <span class="literal">false</span>&#125;</div><div class="line">t.next();</div><div class="line">&gt; <span class="built_in">Object</span> &#123;value: <span class="literal">undefined</span>, done: <span class="literal">true</span>&#125;</div></pre></td></tr></table></figure>
<p>对于普通的函数，当你调用它们的时候，会立即开始执行，直到遇到 return 或者抛出异常才会退出执行。但是为什么这里却不一样呢？当你调用生成器函数时，并不马上执行它的主体，而是返回一个这个生成器函数的<strong>迭代器（iterator）对象</strong>。，而每次你调用生成器对象的 next() 方法时，函数会解冻自身并一直运行到下一个 yield 表达式。</p>
<p>next 方法返回一个拥有 value 和 done 两个字段的对象（ value 是每一个 yield 的右值，done 用来表示是否已经执行完）。当你下次调用 next，函数会从 yield 的下一个语句继续执行，等到整个函数执行完，next 方法返回的 done 字段会变成 true。如果 done 字段为 false，说明可以继续往下执行。</p>
<h2 id="yield-表达式"><a href="#yield-表达式" class="headerlink" title="yield 表达式"></a>yield 表达式</h2><p>yield 表达式定义了迭代器返回的值，或者被 yield* 指定的另一个生成器函数。来看看实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">test1</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">  <span class="keyword">yield</span> i+<span class="number">1</span>;</div><div class="line">  <span class="keyword">yield</span> i+<span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">test2</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">  <span class="keyword">yield</span> i;</div><div class="line">  <span class="keyword">yield</span>* test1(i);</div><div class="line">  <span class="keyword">yield</span> i+<span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> y = test2(<span class="number">2</span>);</div><div class="line"></div><div class="line">y.next();</div><div class="line">&gt; <span class="built_in">Object</span> &#123;value: <span class="number">2</span>, done: <span class="literal">false</span>&#125;</div><div class="line">y.next();</div><div class="line">&gt; <span class="built_in">Object</span> &#123;value: <span class="number">3</span>, done: <span class="literal">false</span>&#125;</div><div class="line">y.next();</div><div class="line">&gt; <span class="built_in">Object</span> &#123;value: <span class="number">4</span>, done: <span class="literal">false</span>&#125;</div><div class="line">y.next();</div><div class="line">&gt; <span class="built_in">Object</span> &#123;value: <span class="number">12</span>, done: <span class="literal">false</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><p>使用 ES6 的生成器函数来实现斐波那契数列（前两个数字都是 1 ，除此之外任何数字都是前两个数之和的数列）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fab</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line">  <span class="keyword">var</span> last = <span class="number">0</span>;</div><div class="line">  <span class="keyword">var</span> current = <span class="number">1</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">while</span>(value &gt; count++)&#123;</div><div class="line">    <span class="keyword">yield</span> current;</div><div class="line">    <span class="keyword">var</span> t = current;</div><div class="line">    current += last;</div><div class="line">    last = current;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> y = fab(<span class="number">12</span>);</div><div class="line"><span class="keyword">var</span> res;</div><div class="line"><span class="keyword">var</span> result = [];</div><div class="line"></div><div class="line"><span class="keyword">while</span>(!(res = y.next()).done)&#123;</div><div class="line">  result.push(res.value);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(result);  <span class="comment">//[1, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]</span></div></pre></td></tr></table></figure>
<p>参考：</p>
<ol>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators" target="_blank" rel="external">迭代器和生成器</a></li>
<li><a href="https://imququ.com/post/generator-function-in-es6.html" target="_blank" rel="external">ES6 中的生成器函数介绍</a></li>
<li><a href="http://www.infoq.com/cn/articles/es6-in-depth-generators" target="_blank" rel="external">深入浅出ES6（三）：生成器 Generators</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS 高程学习 5 ：语句]]></title>
      <url>http://blog.jxdjayden.cn/2016/08/21/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A0/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A05_%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<p>ECMAScript 规定了一组语句，也称为流控制语句。语句定义了 ECMAScript 中的主要语法，语句通常用一或多个关键字来完成任务。</p>
<h2 id="1-if-语句"><a href="#1-if-语句" class="headerlink" title="1. if 语句"></a>1. if 语句</h2><p>语法：<code>if(condition) statement1 else statement2</code> 。condition 可以是任意表达式，而且对整个表达式求值的结果不一定是布尔值，ECMAScript 会调用 Boolean 转换函数将这个表达式的结果转换为一个布尔值，如果对 condition 求值的结果为 true，则执行 statement1 ，否则执行 statement2 。statement1 和 statement2 语句可以是一行代码，或则是一个代码块，但是建议使用代码块（用花括号括起来的代码），方便他人阅读源码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(i&gt;<span class="number">25</span>)&#123;</div><div class="line">  alert(<span class="string">"i 大于 25"</span>);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</div><div class="line">  alert(<span class="string">"i 小于 0"</span>)；</div><div class="line">&#125; <span class="keyword">else</span>&#123;</div><div class="line">  alert(<span class="string">"i 大于 0，小于 25"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="2-do-while-语句"><a href="#2-do-while-语句" class="headerlink" title="2. do-while 语句"></a>2. do-while 语句</h2><p>do-while 语句是一种后测试循环语句，只有在循环体中的代码被执行后，才会测试出口条件。也就是说在对条件表达式求值之前，循环体内的代码至少会被执行一次。</p>
<p>语法及实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">  statement</div><div class="line">&#125; <span class="keyword">while</span> (expression)</div><div class="line"></div><div class="line"><span class="comment">//示例</span></div><div class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">  i+=<span class="number">2</span>;</div><div class="line">&#125; <span class="keyword">while</span>(i&lt;<span class="number">10</span>);</div></pre></td></tr></table></figure>
<h2 id="3-while-语句"><a href="#3-while-语句" class="headerlink" title="3. while 语句"></a>3. while 语句</h2><p>while 属于前测试语句，也就是说，在循环体内的代码被执行前，就会对条件求值。所以，循环体内的代码可能永远不被执行。语法：<code>while(expression) statement</code> 。实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(i&lt;<span class="number">10</span>)&#123;</div><div class="line">i += <span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-for-语句"><a href="#4-for-语句" class="headerlink" title="4. for 语句"></a>4. for 语句</h2><p>for 语句也是前测试循环语句，但它可以在执行循环之前初始化变量和定义循环后要执行的代码。语法及实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//语法</span></div><div class="line"><span class="keyword">for</span> (initialization;expression;post-loop-exression) statement</div><div class="line"><span class="comment">//实例</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">10</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; count;i++)&#123;</div><div class="line">  alert(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只有当条件表达式（i&lt;count）返回 true 的时候才会进入 for 循环，如果执行了循环体中的代码，则一定会对循环后的表达式（i++）求值。</p>
<p>由于 ECMAScript 中不存在块级作用域，所以在循环内部定义的变量在外部也可以访问到。如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> count = <span class="number">10</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; count;i++)&#123;alert(i);&#125;</div><div class="line">alert(i); <span class="comment">//10</span></div></pre></td></tr></table></figure>
<h2 id="5-for-in-语句"><a href="#5-for-in-语句" class="headerlink" title="5. for-in 语句"></a>5. for-in 语句</h2><p>for-in 是精准的迭代语句，可以用来枚举对象的属性。实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> propName <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</div><div class="line">  <span class="built_in">document</span>.write(propName);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-label-语句"><a href="#6-label-语句" class="headerlink" title="6. label 语句"></a>6. label 语句</h2><p>使用 label 语句可以在代码中添加标签，以便将来使用。语法：<code>label:statement</code> 。实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">start:<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; count;i++)&#123;alert(i);&#125;</div></pre></td></tr></table></figure>
<p>这个例子中定义的 start 标签可以在将来由 break 或 continue 语句引用。</p>
<h2 id="7-break-和-continue-语句"><a href="#7-break-和-continue-语句" class="headerlink" title="7. break 和 continue 语句"></a>7. break 和 continue 语句</h2><p>break 和 continue 语句用于在循环中精确地控制代码的执行。其中 break 语句会立即退出循环，强制继续执行循环后面的语句。而 continue 语句虽然也是立即退出循环，但退出循环后会从循环的顶部继续执行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//break</span></div><div class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt; <span class="number">10</span>;i++)&#123;</div><div class="line">  <span class="keyword">if</span>(i % <span class="number">5</span> == <span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">  num++;</div><div class="line">&#125;</div><div class="line">alert(num); <span class="comment">//4</span></div><div class="line"></div><div class="line"><span class="comment">//continue</span></div><div class="line">num = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span>;j &lt; <span class="number">10</span>;j++)&#123;</div><div class="line"><span class="keyword">if</span>(j % <span class="number">5</span> == <span class="number">0</span>)&#123;</div><div class="line">  <span class="keyword">continue</span>;</div><div class="line">&#125;</div><div class="line">num++;</div><div class="line">&#125;</div><div class="line">alert(num); <span class="comment">//8</span></div></pre></td></tr></table></figure>
<h2 id="8-with-语句"><a href="#8-with-语句" class="headerlink" title="8. with 语句"></a>8. with 语句</h2><p>with 语句的作用是将代码的作用域设置到一个特定的对象中，语法：<code>with (expression) statement</code>。实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span>(location)&#123;</div><div class="line"><span class="keyword">var</span> qs = search.substring(<span class="number">1</span>);</div><div class="line"><span class="keyword">var</span> hostName = hostname;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//等价于</span></div><div class="line"><span class="keyword">var</span> qs = location.search.substring(<span class="number">1</span>);</div><div class="line"><span class="keyword">var</span> hostName = location.hostName;</div></pre></td></tr></table></figure>
<h2 id="9-switch-语句"><a href="#9-switch-语句" class="headerlink" title="9. switch 语句"></a>9. switch 语句</h2><p>switch 语句也是流控制语句。语法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span>(expression)&#123;</div><div class="line">  <span class="keyword">case</span> value:statement;</div><div class="line">  <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> value:statement;</div><div class="line">  <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> value:statement;</div><div class="line">  <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">default</span>:statement;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span>(i)&#123;</div><div class="line">  <span class="keyword">case</span> <span class="number">25</span>:</div><div class="line">    <span class="comment">/* 合并两种情形 */</span></div><div class="line">  <span class="keyword">case</span> <span class="number">35</span>:</div><div class="line">    alert(<span class="string">"25 or 35"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="number">45</span>:</div><div class="line">    alert(<span class="string">"45"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    alert(<span class="string">"other"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 switch 语句中可以使用任意数据类型，并且每个 case 的值不一定是常量，可以是变量、表达式。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS 高程学习 4：操作符]]></title>
      <url>http://blog.jxdjayden.cn/2016/08/13/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A0/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A04_%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
      <content type="html"><![CDATA[<h2 id="1-一元操作符"><a href="#1-一元操作符" class="headerlink" title="1. 一元操作符"></a>1. 一元操作符</h2><p>只能操作一个值的操作符叫做一元操作符。</p>
<h3 id="1-递增和递减操作符"><a href="#1-递增和递减操作符" class="headerlink" title="1. 递增和递减操作符"></a>1. 递增和递减操作符</h3><p>递增和递减操作符有两个版本：前置型和后置型。执行前置递增和递减操作时，变量的值都是在语句被求值之前改变的。而后置递减和递减的操作是在包含它们的语句被求值后才执行的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//前置</span></div><div class="line"><span class="keyword">var</span> age = <span class="number">29</span>；</div><div class="line"><span class="keyword">var</span> tage = --age + <span class="number">2</span>；</div><div class="line"></div><div class="line">alert(age); <span class="comment">//28</span></div><div class="line">alert(tage); <span class="comment">//30</span></div><div class="line"></div><div class="line"><span class="comment">//前置的另一个例子</span></div><div class="line"><span class="keyword">var</span> num1 = <span class="number">2</span>;</div><div class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</div><div class="line"><span class="keyword">var</span> num3 = --num1 + num2; <span class="comment">// num3 = 21</span></div><div class="line"><span class="keyword">var</span> num4 = num1 + num2; <span class="comment">// num4 = 21</span></div><div class="line"></div><div class="line"><span class="comment">//后置</span></div><div class="line"><span class="keyword">var</span> num1 = <span class="number">2</span>;</div><div class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</div><div class="line"><span class="keyword">var</span> num3 = num1-- + num2; <span class="comment">// num3 = 22</span></div><div class="line"><span class="keyword">var</span> num4 = num1 + num2; <span class="comment">// num4 = 21</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>如果将操作符应用于一个不包含有效数字字符的字符串时，会将变量的值设置为 NaN。<br>如果将操作符应用在对象上，先调用对象的 valueof() 方法以取得一个可供操作的值，然后对该值应用操作符。如果结果是 NaN，则再调用 toString() 方法后再应用前述规则。</p>
<h3 id="2-一元加和减操作符"><a href="#2-一元加和减操作符" class="headerlink" title="2. 一元加和减操作符"></a>2. 一元加和减操作符</h3><p>把一元加操作符放在数值前面，对数值不会产生影响。但是对非数值应用一元加操作符时，该操作符会像 Number() 转型函数一样对这个值执行转换。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s1 = <span class="string">"01"</span>;</div><div class="line"><span class="keyword">var</span> s2 = <span class="string">"1.1"</span>;</div><div class="line"><span class="keyword">var</span> s3 = <span class="string">"z"</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</div><div class="line"><span class="keyword">var</span> f = <span class="number">1.1</span>;</div><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">    valueOf: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">-1</span>;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">s1 = +s1; <span class="comment">//1</span></div><div class="line">s2 = +s2; <span class="comment">//1.1</span></div><div class="line">s3 = +s3; <span class="comment">//NaN</span></div><div class="line">b = +b; <span class="comment">//0</span></div><div class="line">f = +f; <span class="comment">//1.1</span></div><div class="line">o = +o; <span class="comment">//-1</span></div></pre></td></tr></table></figure>
<p>一元减操作符应用于数值时，该值会变为负数。在应用于非数值时，遵循和一元加操作符相同的规则。</p>
<h2 id="2-位操作符"><a href="#2-位操作符" class="headerlink" title="2. 位操作符"></a>2. 位操作符</h2><p>位操作符用于在最基本的层次上，即按内存中表示数值的位来操作数值。（略过 ECMAScript 中数值的存储方式等内容。）注意以下的操作符都是在二进制下计算然后返回十进制的。</p>
<h3 id="1-按位非（NOT）"><a href="#1-按位非（NOT）" class="headerlink" title="1. 按位非（NOT）"></a>1. 按位非（NOT）</h3><p>按位非操作符由一个波浪线（~）表示，执行按位非的结果就是返回数值的反码。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num1 =<span class="number">25</span>; <span class="comment">//二进制按位非</span></div><div class="line"><span class="keyword">var</span> num2 = ~num1; <span class="comment">//-26</span></div></pre></td></tr></table></figure>
<h3 id="2-按位与（AND）"><a href="#2-按位与（AND）" class="headerlink" title="2. 按位与（AND）"></a>2. 按位与（AND）</h3><p>按位与操作符由一个 &amp; 字符表示，它有两个操作符数。按位与操作只在两个数值的对应位都是 1 时才返回 1，任何一位是 0 ，都返回 0。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = <span class="number">25</span> &amp; <span class="number">3</span>;<span class="comment">// 1</span></div></pre></td></tr></table></figure>
<h3 id="3-按位或（OR）"><a href="#3-按位或（OR）" class="headerlink" title="3. 按位或（OR）"></a>3. 按位或（OR）</h3><p>按位或操作符由一个竖线（|）符号表示，同样也有两个操作数。按位或操作在有一个位是 1 的情况下返回 1 ，只有在两个位都是 0 时才返回 0。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = <span class="number">25</span> | <span class="number">3</span>; <span class="comment">//27</span></div></pre></td></tr></table></figure>
<h3 id="4-按位异或（XOR）"><a href="#4-按位异或（XOR）" class="headerlink" title="4. 按位异或（XOR）"></a>4. 按位异或（XOR）</h3><p>按位异或操作符由一个插入符号（^）表示。按位异或操作在两个数值对应位上只有一个 1 时返回 1。如果对应位的两位都是 1 或 0，则返回 0 。</p>
<h3 id="5-左移"><a href="#5-左移" class="headerlink" title="5. 左移"></a>5. 左移</h3><p>左移操作符由两个小于号（&lt;&lt;）表示，这个操作符会将数值的所有位向左移动指定的位数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oldValue = <span class="number">2</span>;</div><div class="line"><span class="keyword">var</span> newValue = oldValue &lt;&lt; <span class="number">5</span>; <span class="comment">// 64</span></div></pre></td></tr></table></figure>
<h3 id="6-有符号的右移"><a href="#6-有符号的右移" class="headerlink" title="6. 有符号的右移"></a>6. 有符号的右移</h3><p>有符号的右移操作符用两个大于号（&gt;&gt;）表示。这个操作符会将数值向右移动，但保留符号位。</p>
<h3 id="7-无符号右移"><a href="#7-无符号右移" class="headerlink" title="7. 无符号右移"></a>7. 无符号右移</h3><p>无符号右移用三个大于号表示。这个操作符会将数值的所有 32 位都向右移动，对正数来说，无符号右移的结果与有符号右移相同，但是将负数无符号右移，结果就不同了，无符号右移是以 0 来填充空位。而不是像有符号右移那样以符号位的值来填充空位。无符号右移会把附属的二进制码当成正数的二进制码，而且，由于负数以其绝对值的二进制补码形式表示，因此会导致无符号右移后的结果非常大。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> old = <span class="number">-64</span>;</div><div class="line"><span class="keyword">var</span> newValue = old &gt;&gt;&gt; <span class="number">5</span>; <span class="comment">//134217726</span></div></pre></td></tr></table></figure>
<h2 id="3-布尔操作符"><a href="#3-布尔操作符" class="headerlink" title="3. 布尔操作符"></a>3. 布尔操作符</h2><h3 id="1-逻辑非"><a href="#1-逻辑非" class="headerlink" title="1. 逻辑非"></a>1. 逻辑非</h3><p>逻辑非操作符用 ! 表示，可以应用于 ECMAScript 中的任何值。逻辑非操作符首先会将它的操作数准换为一个布尔值，然后再对其求反。逻辑非遵循下面的规则。</p>
<ul>
<li>返回 true<ul>
<li>操作数是一个空字符串；</li>
<li>操作数是数值 0；</li>
<li>操作数是 null；</li>
<li>操作数是 NaN；</li>
<li>操作数是 undefined；</li>
</ul>
</li>
<li>返回 false<ul>
<li>操作数是一个对象；</li>
<li>操作数是一个非空字符串；</li>
<li>操作数是任意非零数值（包括 infinity）；</li>
</ul>
</li>
</ul>
<h3 id="2-逻辑与"><a href="#2-逻辑与" class="headerlink" title="2. 逻辑与"></a>2. 逻辑与</h3><p>逻辑与用 &amp;&amp; 表示，有两个操作数。两个操作数同为 true ，则结果返回 true。否则返回 false。</p>
<p>逻辑与操作在有一个操作数不是布尔值的情况下，则不一定返回布尔值。它遵循下列规则：</p>
<ul>
<li>第一个操作数是对象，则返回第二个操作数。</li>
<li>第二个操作数是对象，则只有在第一个操作数的求值结果为 true  的情况下才会返回该对象。</li>
<li>如果两个操作数都是对象， 则返回第二个操作数。</li>
<li>如果有一个操作数是 null ，则返回 null。</li>
<li>如果有一个操作数是 NaN，则返回 NaN。</li>
<li>如果有一个操作数是 undefined，则返回 undefined。</li>
</ul>
<p>逻辑与操作属于短路操作，即如果第一个操作数能够决定结果，那么就不会对第二个操作数求值。</p>
<h3 id="3-逻辑或"><a href="#3-逻辑或" class="headerlink" title="3. 逻辑或"></a>3. 逻辑或</h3><p>逻辑或操作符用 || 表示，有两个操作数。</p>
<p>逻辑或操作与逻辑与操作相似，如果有一个操作数不是布尔值，逻辑或也不一定返回布尔值。它遵循下列规则：</p>
<ul>
<li>如果第一个操作数是对象，则返回第一个对象。</li>
<li>如果第一个操作数的求值结果为 false ，则返回第二个操作数。</li>
<li>如果两个操作数都是对象，则返回第一个操作数。</li>
<li>如果两个操作数都是 null，返回 null。</li>
<li>如果两个操作数都是 NaN，返回 NaN。</li>
<li>如果两个操作数都是 undefined ，返回 undefined。</li>
</ul>
<p>我们可以利用逻辑或来避免为变量赋 null 或 undefined 值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> value = preferredObject || backup;</div><div class="line"><span class="comment">// 变量 value 将被赋予等号后面两个值的其中一个，变量 preferredObject 中包含优先赋给变量 value 的值，变量 backup 负责在 preferredObject 中不包含有效值的情况下提供后备值。</span></div></pre></td></tr></table></figure>
<h2 id="4-乘性操作符"><a href="#4-乘性操作符" class="headerlink" title="4. 乘性操作符"></a>4. 乘性操作符</h2><h3 id="1-乘法"><a href="#1-乘法" class="headerlink" title="1. 乘法"></a>1. 乘法</h3><p>乘法操作（*）遵循下列规则（仅列出特殊情况）：</p>
<ul>
<li>乘积超出 ECMAScript 数值的表示范围，则返回 Infinity 或 -Infinity。</li>
<li>如果有一个操作数是 NaN，则结果是 NaN。</li>
<li>如果是 Infinity 与 0 相乘，则返回 NaN。</li>
<li>如果是 Infinity 与非 0 数值相乘，则返回 Infinity 或 -Infinity。</li>
<li>如果是 Infinity 与 Infinity 相乘，返回 Infinity。</li>
<li>如果有一个操作数不是数值，则在后台调用 Number() 函数将其转换为数值，然后再应用上面的规则。</li>
</ul>
<h3 id="2-除法"><a href="#2-除法" class="headerlink" title="2. 除法"></a>2. 除法</h3><p>除法操作符用一个斜线符号（/）表示，规则不再列出注意 Infinity 的除法就好了。</p>
<h3 id="3-求模"><a href="#3-求模" class="headerlink" title="3. 求模"></a>3. 求模</h3><p>求模（余数）操作符用一个百分号（%）表示，如 <code>var result = 26 %  5</code>，结果是 1。</p>
<h2 id="5-加性操作符"><a href="#5-加性操作符" class="headerlink" title="5. 加性操作符"></a>5. 加性操作符</h2><h3 id="1-加法（-）"><a href="#1-加法（-）" class="headerlink" title="1. 加法（+）"></a>1. 加法（+）</h3><p>对于有一个操作符是字符串的情况，则有：1. 两个操作数都是字符串，则将第二个字符串和第一个字符串拼接起来；如果只有一个操作数是字符串，则将另一个操作数转换为字符串，然后将它们拼接起来。</p>
<p>如果有一个操作数是对象， 数值或布尔值。则调用它们的 toString 方法取得相应的字符串值，然后再应用上述规则。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = <span class="number">5</span> + <span class="number">5</span>; <span class="comment">//10</span></div><div class="line"><span class="keyword">var</span> result1 = <span class="number">5</span> + <span class="string">"5"</span>; <span class="comment">//"55"</span></div></pre></td></tr></table></figure>
<h3 id="2-减法（-）"><a href="#2-减法（-）" class="headerlink" title="2. 减法（-）"></a>2. 减法（-）</h3><p>如果有一个操作数是字符串，布尔值，null 或 undefined，则先在后台调用 Number() 函数将其转换为数值。然后再计算，如果转换的数值是 NaN，则减法的结果为 NaN。</p>
<h2 id="6-关系操作符"><a href="#6-关系操作符" class="headerlink" title="6. 关系操作符"></a>6. 关系操作符</h2><p>小于（&lt;），大于（&gt;），小于等于（&lt;=），大于等于（&gt;=）这几个关系操作符用于比较两个值，返回布尔值。</p>
<ul>
<li>如果两个操作数都是数值，则执行数值比较。</li>
<li>两个操作数都是字符串，则比较两个字符串对应的字符编码值。</li>
<li>如果一个操作数是数值，则将另一个操作数转换为数值，然后在执行数值比较。</li>
<li>如果一个操作数是对象， 则调用这个对象的 valueof() 方法，然后再比较。如果对象没有 valueof() 方法，则调用 toString() 方法，并用得到的结果根据前面的规则比较。</li>
<li>如果一个操作数是布尔值，则先将其转换为数值，然后再执行比较。</li>
</ul>
<h2 id="7-相等操作符"><a href="#7-相等操作符" class="headerlink" title="7. 相等操作符"></a>7. 相等操作符</h2><h3 id="1-相等和不相等（-和-）"><a href="#1-相等和不相等（-和-）" class="headerlink" title="1. 相等和不相等（== 和 !=）"></a>1. 相等和不相等（== 和 !=）</h3><p>这两个操作符都会先转换操作数，然后再比较他们的相等性。</p>
<p>这两个操作符在进行比较时需要遵循下列的规则：</p>
<ul>
<li>null 和 undefined 是相等的。（一个很奇怪的设定。）</li>
<li>要比较相等性之前，不能将 null 和 undefined 转换成其他任何值。</li>
<li>如果有一个操作数是 NaN，则相等操作符返回 false，而不相等操作符返回 true。注意：<strong>NaN 不等于 NaN</strong></li>
<li>如果两个操作符都是对象，则比较它们是不是同一个对象，如果都指向同一个对象，则相等操作符返回 true，否则，返回 false。</li>
</ul>
<h3 id="2-全等和不全等（-和-）"><a href="#2-全等和不全等（-和-）" class="headerlink" title="2. 全等和不全等（=== 和 !== ）"></a>2. 全等和不全等（=== 和 !== ）</h3><p>全等操作符只在两个操作数未经转换就相等的情况下返回 true。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result1 = (<span class="string">"55"</span> == <span class="number">55</span>); <span class="comment">//true</span></div><div class="line"><span class="keyword">var</span> result2 = (<span class="string">"55"</span> === <span class="number">55</span>); <span class="comment">//false</span></div></pre></td></tr></table></figure>
<p>注意：<strong>null !== undefined</strong></p>
<h2 id="8-条件操作符"><a href="#8-条件操作符" class="headerlink" title="8. 条件操作符"></a>8. 条件操作符</h2><p>直接上代码~</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = boolean_expression ? true_value:false_value;</div><div class="line"><span class="comment">//如果 boolean_expression 为 true，则给变量 result 赋予 true_value，否则给变量 result 赋予 false_value。</span></div><div class="line"><span class="keyword">var</span> max = (num1 &gt; num2) ? num1 : num2;</div><div class="line"><span class="comment">//返回 num1 和 num2 之间最大值。</span></div></pre></td></tr></table></figure>
<h2 id="9-赋值操作符"><a href="#9-赋值操作符" class="headerlink" title="9. 赋值操作符"></a>9. 赋值操作符</h2><p>简单的赋值操作符由等于号（=）表示，其作用就是把右侧的值赋给左侧的变量。如果在等于号之前添加乘性操作符等，就可以完成复合赋值操作。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">10</span>；</div><div class="line">num += <span class="number">10</span>; <span class="comment">//等于 num = num + 10</span></div></pre></td></tr></table></figure>
<h2 id="10-逗号操作符"><a href="#10-逗号操作符" class="headerlink" title="10. 逗号操作符"></a>10. 逗号操作符</h2><p>上代码~</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num1 =<span class="number">1</span>,num2 = <span class="number">2</span>;</div><div class="line"><span class="comment">//逗号操作符多用于声明多个表达式。</span></div><div class="line"><span class="keyword">var</span> num = (<span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">0</span>); <span class="comment">// num = 0;</span></div><div class="line"><span class="comment">//逗号操作符可以用来赋值，这时总会返回表达式中的最后一项。</span></div></pre></td></tr></table></figure>
<p>拓展阅读：</p>
<ol>
<li><a href="https://zhuanlan.zhihu.com/p/21650547" target="_blank" rel="external">通过一张简单的图，让你彻底搞懂JS的==运算</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comma_Operator" target="_blank" rel="external">逗号操作符</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS 高程学习 3：数据类型]]></title>
      <url>http://blog.jxdjayden.cn/2016/08/05/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A0/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>ECMAScript 中有五种简单数据类型（也称为基本数据类型）：Undefined，Null，Boolean，Number 和 string ，还有一种复杂数据类型：object 。 来简单了解一下每种数据类型。</p>
<h2 id="1-typeof-操作符"><a href="#1-typeof-操作符" class="headerlink" title="1. typeof 操作符"></a>1. typeof 操作符</h2><p>typeof 操作符用来检测给定变量的数据类型。typeof 对一个值可能返回下列的某个字符串。    </p>
<pre><code>- &quot;undefined&quot; : 这个值未定义
- &quot;boolean&quot; : 这个值是布尔值
- &quot;string&quot; : 这个值是字符串
- &quot;number&quot; : 这个值是数值
- &quot;object&quot; : 这个值是对象或者 null
- &quot;function&quot; : 这个值是函数
</code></pre><p><strong>typrof null 会返回 “object”</strong></p>
<h2 id="2-undefined-类型"><a href="#2-undefined-类型" class="headerlink" title="2. undefined 类型"></a>2. undefined 类型</h2><p>undefined 类型只有一个值，那就是 undefined 。在使用 var 声明变量但未对其初始化时，这个变量的值就是 undefined 。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> message;</div><div class="line">alert(message == <span class="literal">undefined</span>); <span class="comment">//true</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>不过，包含 undefined 值的变量和尚未定义的变量是不一样的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> message;</div><div class="line"></div><div class="line"><span class="comment">//下面这个变量并没有声明</span></div><div class="line"><span class="comment">//var age</span></div><div class="line"></div><div class="line">alert(message); <span class="comment">//undefined</span></div><div class="line">alert(age); <span class="comment">//错误</span></div></pre></td></tr></table></figure>
<p>对未初始化的变量执行 typeof 操作符会返回 undefined，而对未声明的变量执行 typeof 操作符同样也返回 undefined 值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> message;</div><div class="line"></div><div class="line"><span class="comment">//下面这个变量并没有声明</span></div><div class="line"><span class="comment">//var age</span></div><div class="line"></div><div class="line">alert(<span class="keyword">typeof</span> message); <span class="comment">//"undefined"</span></div><div class="line">alert(<span class="keyword">typeof</span> age); <span class="comment">//"undefined"</span></div></pre></td></tr></table></figure>
<h2 id="3-Null-类型"><a href="#3-Null-类型" class="headerlink" title="3. Null 类型"></a>3. Null 类型</h2><p>null 类型是第二个只有一个值的数据类型，这个特殊值是 null 。从逻辑角度来看，null 表示一个空对象指针，这也是使用 typeof 操作符检测 null 值会返回 “object” 的原因。<br>如果定义的对象准备用来保存对象，那么最好将该变量初始化为 null 。<br>然而 ECMA-262 规定对 undefined 和 null 的相等性测试要返回 true 。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">//true</span></div></pre></td></tr></table></figure>
<h2 id="4-boolean-类型"><a href="#4-boolean-类型" class="headerlink" title="4. boolean 类型"></a>4. boolean 类型</h2><p>boolean 类型只有两个字面值：true 和 false。所有类型的值都可以调用转型函数 boolean() 转换成对应的 boolean 值的变量。</p>
<h2 id="5-Number-类型"><a href="#5-Number-类型" class="headerlink" title="5. Number 类型"></a>5. Number 类型</h2><h3 id="1-浮点数值"><a href="#1-浮点数值" class="headerlink" title="1. 浮点数值"></a>1. 浮点数值</h3><p>浮点数值：该数值必须包含一个小数点，并且小数点后面至少有一位数字。</p>
<p>ECMAScript 在合适的时候会把浮点数转换成整数来存储。对于极大或者极小的数值可以用科学计数法来表示。浮点数的最高精度是 17 位，但是在进行算术计算时其精确度远远不如整数。如 0.1 + 0.2 的结果不是 0.3，而是0.30000000000000004，这个舍入误差会导致无法测试特定的浮点数值。</p>
<h3 id="2-NaN"><a href="#2-NaN" class="headerlink" title="2. NaN"></a>2. NaN</h3><p>NaN 即非数值，这个数值用来表示一个本来要返回数值的操作数未返回数值的情况。在 ECMAScript 中，任何数值除以非数值会返回 NaN ，因此不影响其他代码的执行。<br>NaN 有两个特点：任何涉及 NaN 的操作都会返回 NaN ，NaN 与任何数值都不相等，包括 NaN 本身。可以使用 isNaN() 函数来判断参数是否“不是数值”。</p>
<h3 id="3-数值转换"><a href="#3-数值转换" class="headerlink" title="3. 数值转换"></a>3. 数值转换</h3><p>可以使用 Number()、parseInt()、parseFloat()这三个函数把非数值转换成数值。Number()可用于任何数据类型，而另外两个专门用于把字符串转换成数值。<br>Number() 的转换规则如下：</p>
<ul>
<li>如果是 boolean 值，true 和 false 将分别被转换成 1 和 0。</li>
<li>如果是数字，只是简单的传入和返回。</li>
<li>如果是 null 值，返回 0。</li>
<li>如果是 undefined ，返回 NaN。</li>
<li>如果是字符串，遵循下列的规则。<ul>
<li>字符串中只包含数字（包括带正负号的情况），则将其转换成十进制，注意 “011” 会转换成 11。</li>
<li>如果字符串中包含有效的浮点格式，如 “1.1”,则将其转换为对应的浮点数值，注意也会忽略前导零。</li>
<li>如果字符串中包含有效的十六进制格式，则将其转换成相同大小的十进制整数。</li>
<li>如果字符串是空的，则转换成 0。</li>
<li>如果字符串包含除上述格式之外的字符，则将其转换成 NaN。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num1 = <span class="built_in">Number</span>(<span class="string">"hello"</span>); <span class="comment">//NaN</span></div><div class="line"><span class="keyword">var</span> num2 = <span class="built_in">Number</span>(<span class="string">""</span>); <span class="comment">//0</span></div><div class="line"><span class="keyword">var</span> num3 = <span class="built_in">Number</span>(<span class="string">"0000011"</span>); <span class="comment">//11</span></div><div class="line"><span class="keyword">var</span> num4 = <span class="built_in">Number</span>(<span class="literal">true</span>); <span class="comment">//1</span></div></pre></td></tr></table></figure>
<p>在处理整数时更常用 praseInt() 函数，parseInt() 函数在转换字符串时，更多的是看其是否符合数值模式。他会忽略字符串前面的空格。直至找到第一个非空格字符，如果第一个字符不是数字字符或者符号，praseInt() 会返回 NaN。下面是一些例子</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num1 = praseInt(<span class="string">"12345abs"</span>); <span class="comment">//12345</span></div><div class="line"><span class="keyword">var</span> num1 = praseInt(<span class="string">""</span>); <span class="comment">//NaN</span></div><div class="line"><span class="keyword">var</span> num1 = praseInt(<span class="string">"0xA"</span>); <span class="comment">//10 十六进制</span></div></pre></td></tr></table></figure>
<p>为了消除不必要的问题，可以为 praseInt() 函数提供第二个参数：转换时使用的基数（即多少进制）。</p>
<p>praseFloat() 和 praseInt() 类似，也是从第一个字符开始解析每个字符，但是字符串中的第一个小数点是有效的，另一个要点是 praseFloat() 始终会忽略前导零，它只用于解析十进制数。</p>
<h2 id="6-String-类型"><a href="#6-String-类型" class="headerlink" title="6. String 类型"></a>6. String 类型</h2><p>string 类型用于表示由零个或者多个 16 位 Unicode 字符组成的字符序列。</p>
<ol>
<li><p>字符字面量</p>
<p> string 数据类型包含一些特殊的字符字面量，也叫转义序列，用于表示非打印字符，或者具有其他用途的字符。可通过查阅了解，常用的有 “\n”: 换行；”\r”: 回车；”\’”: 单引号；”\””: 双引号等。</p>
</li>
<li><p>字符串的特点</p>
<p> ECMAScript 中的字符串是不可变的， 也就是说字符串一旦创建，它们的值就不能改变，要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量。</p>
</li>
<li><p>转换为字符串</p>
<ol>
<li>使用 toString() 方法。但是 null 和 undefined 没有 toString() 方法。</li>
<li>使用转型函数 String()。如果 null 会返回 “null”，如果 undefined 返回 “undefined”</li>
</ol>
</li>
</ol>
<h2 id="7-object-类型"><a href="#7-object-类型" class="headerlink" title="7. object 类型"></a>7. object 类型</h2><p>ECMAScript 中的对象其实就是一组数据与功能的集合。对象可以通过执行 new 操作符后要跟要创建的对象类型的名称来创建，而创建 object 类型的实例并为其添加属性和方法，就可以自定义对象。如：<code>var o=new Object()</code>。</p>
<p>在ECMASript 中，Object 类型是所有它的实例的基础，Object 类型所具有的任何属性和方法也同样存在于更具体的对象中。</p>
<p>Object 的每个实例都具有下列属性和方法：</p>
<ul>
<li>construtor：保存着用于创建当前对象的函数。</li>
<li>hasOwnProperty：用于检查给定的属性在当前对象实例中（而不是对象的原型中）是否存在。作为参数的属性名必须以字符串形式指定。</li>
<li>isPrototypeof：用于检查传入的对象是否是传入对象的原型。</li>
<li>properyIsEnumerable：用于检查给定的属性是否可以使用 for-in 语句来枚举。</li>
<li>toLocaleString：返回对象的字符串表示，该字符串与执行环境的地区对应。</li>
<li>toString：返回对象的字符串表示。</li>
<li>valueOf：返回对象的字符串、数值或布尔值表示。通常与 toString() 方法返回的值相同。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS 高程学习 2：基本概念]]></title>
      <url>http://blog.jxdjayden.cn/2016/08/04/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A0/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A02_%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<h1 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h1><ol>
<li><p>区分大小写—— ECMAScript中的一切都区分大小写。</p>
</li>
<li><p>标识符：变量、函数、属性的名字，或者函数的参数。标识符的第一个字符必须是一个字母，下划线（_）或者一个美元符号（$）;其他字符可以是字母、下划线、美元符号或数字。注意：<strong>不能把关键字、保留字、true、false 和 null 用作标识符。</strong></p>
<blockquote>
<p>ECMAScript 标识符一般采用驼峰大小写格式：firstSecond。第一个字母小写，剩下的每个单词的首字母大写。</p>
<a id="more"></a></blockquote>
</li>
<li><p>注释。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//这是一个单行注释</div><div class="line"></div><div class="line">/*</div><div class="line"> *   这是一个多行注释</div><div class="line"> *   中间两行的星号不是必须的，仅为了提高注释的可读性。</div><div class="line"> */</div></pre></td></tr></table></figure>
</li>
<li><p>严格模式<br>严格模式下，ECMAScript3 的一些不确定的行为将会得到处理，而且对某些不安全的操作也会抛出错误。启用严格模式可以在顶部添加代码：<code>&#39;use strict&#39;;</code>。同样可以在函数内部的上方注明，指定函数在严格模式下执行。</p>
</li>
<li><p>语句<br>ECMAScript 中的语句以一个分号结尾，如果省略分号将有解析器确定语句的结尾。建议不要省略分号，以免发生不必要的错误。同样的，用 {} 可以将多条语句组合到一个代码块中。在控制语句( if )中使用代码块可以让编码意图更加清晰。</p>
</li>
</ol>
<h1 id="2-关键字和保留字"><a href="#2-关键字和保留字" class="headerlink" title="2. 关键字和保留字"></a>2. 关键字和保留字</h1><p>ECMA-262 描述了一组具有特定用途的关键字，这些关键字不能用作标识符。详细可<a href="http://www.runoob.com/js/js-reserved.html" target="_blank" rel="external">点击</a>查看。</p>
<h1 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h1><p>ECMAScript 的变量是松散型的，即可以用来保存任何类型的数据，也就是说，每个变量仅仅是一个用来保存值的占位符而已。定义变量需要使用 var 操作符。例：<code>var massage;</code> 。ECMAScript 支持直接初始化变量：<code>var massage =&#39;hi&#39;;</code> ,此时并不会把这个变量标记为字符串类型，所以可以在修改变量值的时候修改值的类型。但是不建议修改变量所保存值的类型。<br>需要注意的是：如果用 var 操作符定义变量，将成为定义该变量的作用域中的局部变量，也就是说，如果在函数中使用 var 定义一个变量，那么这个变量在函数退出后就会被销毁。例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> massage = <span class="number">2</span>; <span class="comment">//局部变量</span></div><div class="line">&#125;</div><div class="line">test();</div><div class="line">alert(massage); <span class="comment">//错误！</span></div></pre></td></tr></table></figure></p>
<p>如果忽略 var 将定义一个全局变量，但是<strong>不建议这样做</strong>，因为在局部作用域中定义的全局变量很难维护。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Express 学习记录：Express 的方法]]></title>
      <url>http://blog.jxdjayden.cn/2016/08/03/Express/Express%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="1-all-方法和-HTTP-动词方法"><a href="#1-all-方法和-HTTP-动词方法" class="headerlink" title="1. all 方法和 HTTP 动词方法"></a>1. all 方法和 HTTP 动词方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.all(<span class="string">'*'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">    consloe.log(<span class="string">'Server start'</span>);</div><div class="line">    next();</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">app.get(<span class="string">'/hello'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">    res.end(<span class="string">'hello world'</span>);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>app 的 all 方法表示所有请求都必须通过该中间件，参数中的“*”表示对所有路径有效。app 的 get方法则是只有 get 的 HTTP 请求通过该中间件，它的第一个参数是请求的路径。<br>除了 get 方法以外，Express 还提供 post、put、delete 方法，即HTTP 方法都是 Express 的方法。<br>Express 还允许模式匹配：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/hello/:name'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">    res.end(<span class="string">'hello'</span>+req.params.name+<span class="string">'!'</span>);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<p>如果输入网址为：’/hello/jayden’，jayden 将会被作为 req.params.name 属性的值，浏览器输出 hello jayden！。<br><strong>需要注意的是，捕获后需要对网址进行检查，过滤不安全字符!</strong><br>如果在模式参数后面加上问号，表示该参数可选。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">app.get(&apos;/hello/:name?&apos;function(req,res)&#123;</div><div class="line">    if(req.params.name)&#123;</div><div class="line">        res.send(&apos;your name is&apos;+req.params.name);</div><div class="line">    &#125; else&#123;</div><div class="line">        res.send(&apos;hello&apos;);</div><div class="line">    &#125;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p>
<p>当然，模式匹配也支持正则表达式。</p>
<h1 id="2-set-方法"><a href="#2-set-方法" class="headerlink" title="2. set 方法"></a>2. set 方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.set(&apos;name&apos;,&apos;jayden&apos;);</div></pre></td></tr></table></figure>
<p>set 方法用于指定变量的值。上面的代码为系统变量 “name” 指定值为 “jayden”。</p>
<h1 id="3-response-对象"><a href="#3-response-对象" class="headerlink" title="3. response 对象"></a>3. response 对象</h1><h2 id="1-response-redirect-方法允许网址的重定向。"><a href="#1-response-redirect-方法允许网址的重定向。" class="headerlink" title="1. response.redirect 方法允许网址的重定向。"></a>1. response.redirect 方法允许网址的重定向。</h2><p><strong>未完待续</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Express 学习记录：运行原理]]></title>
      <url>http://blog.jxdjayden.cn/2016/08/01/Express/Express%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="1-底层：http-模块"><a href="#1-底层：http-模块" class="headerlink" title="1. 底层：http 模块"></a>1. 底层：http 模块</h1><p>http 模块生成服务器原始代码如下。createServer 方法表示生成一个 HTTP 服务器实例。该方法接受一个回调函数，该回调函数的参数，分别为代表 HTTP 请求和HTTP 回应的 request 对象和 response 对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> app=http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">    response.send(<span class="string">'hello'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">8000</span>,<span class="string">'localhost'</span>);</div></pre></td></tr></table></figure></p>
<p>Eepress 框架建立在 node.js 内置的 http 模块上。它的核心是对 http 模块的再包装。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'Hello world!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>比较两端代码可以发现它们非常接近，两者的回调函数都是相同的。Express 框架等于在 http 模块之上，加了一个中间层。</p>
<h1 id="2-中间件"><a href="#2-中间件" class="headerlink" title="2. 中间件"></a>2. 中间件</h1><p>中间件(middleware)简单地说就是处理 HTTP 请求的函数，它的特点是一个中间件处理完再传递给下一个中间件。<br>每个中间件可以从 app 实例接收三个参数：request、response、next（下一个中间件）。<br>一个最基础的中间件的代码如下。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">middleware</span>(<span class="params">req,res,next</span>)</span>&#123;</div><div class="line">    next();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="3-use-方法"><a href="#3-use-方法" class="headerlink" title="3. use 方法"></a>3. use 方法</h1><p>use 是 express 注册中间件的方法，它返回一个函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">request,response,next</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(request.url);</div><div class="line">    next();</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">    response.end(<span class="string">'hello world'</span>);</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">http.createServer(app).listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure></p>
<p>这里使用 app.use 方法注册了两个中间件。在收到 HTTP 请求后会先调用第一个中间件，输出请求的地址，因为第一个中间件中调用了 next() 方法，所以接下来会执行第二个中间件，输出 HTTP 回应。由于第二个中间件没有调用 next 方法，所以 request 对象就不再向后传递了。<br>use 方法内部可以对访问路径进行判断，据此就能实现简单的路由，根据不同的请求网址，返回不同的网页内容。除了在回调函数内部判断请求的网址，use 方法也允许将请求网址写在第一个参数。这代表，只有请求路径匹配这个参数，后面的中间件才会生效。无疑，这样写更加清晰和方便。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express=<span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> app=express();</div><div class="line"></div><div class="line">app.use(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response,next</span>)</span>&#123;</div><div class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">    response.send(<span class="string">'this is start'</span>);</div><div class="line">    &#125;);</div><div class="line">app.use(<span class="string">'/hello'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response,next</span>)</span>&#123;</div><div class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">    response.send(<span class="string">'hello world'</span>);</div><div class="line">    &#125;);</div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">    response.send(<span class="string">'404 Not found'</span>);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">http.createServer(app).listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>参考：<a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc5" target="_blank" rel="external">《JavaScript 标准参考教程（alpha）》</a>，by 阮一峰</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS 高程学习 1：JavaScript 简介]]></title>
      <url>http://blog.jxdjayden.cn/2016/07/31/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A0/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A01_JavaScript%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<h1 id="1-JavaScript-简史"><a href="#1-JavaScript-简史" class="headerlink" title="1. JavaScript 简史"></a>1. JavaScript 简史</h1><p>JavaScript 诞生于 1995 年，当时它的主要目的是处理以前由服务器端语言（如 Perl）负责的一些输入验证操作。1997 年，以 JavaScript1.1 为蓝本的建议被提交给了 ECMA，经过数月的努力，完成了 ECMA-262 的新脚本语言的标准。自此以后，浏览器开发商就开始致力于将 ECMAScript 作为各自 JavaScript 实现的基础。<br>如今，JavaScript 已经成为一门功能全面的编程语言，能够处理复杂的计算和交互，拥有了闭包，匿名函数等特性。</p>
<h1 id="2-JavaScript-的实现"><a href="#2-JavaScript-的实现" class="headerlink" title="2. JavaScript 的实现"></a>2. JavaScript 的实现</h1><p>完整的 JavaScript 由三个部分组成：核心（ECMAScript），文档对象模型（DOM），浏览器对象模型（BOM）。</p>
<a id="more"></a>
<h2 id="1-ECMAScript"><a href="#1-ECMAScript" class="headerlink" title="1. ECMAScript"></a>1. ECMAScript</h2><p>由 ECMA-262 定义的 ECMAScript 与 Web 浏览器没有依赖关系，我们常见的 Web 浏览器只是 ECMAScript 的宿主环境之一。ECMA-262 标准规定了这门语言的组成部分：1. 语法；2.类型；3.语句；4.关键字；5.保留字；6.操作符，7.对象。<br>目前 ECMAScript 最新标准是：ECMA-262 Edition 6  。详细的版本更替记录以及浏览器对 ECMAScript 的支持情况可以<a href="https://zh.wikipedia.org/wiki/ECMAScript" target="_blank" rel="external">点击</a>查看。（这里不写出来是因为书里面的信息已经过期了，本人阅读的是第 3 版。wiki 已经很好地记录了 ECMAScript 历史信息。）</p>
<h2 id="2-文档对象模型（DOM）"><a href="#2-文档对象模型（DOM）" class="headerlink" title="2. 文档对象模型（DOM）"></a>2. 文档对象模型（DOM）</h2><p>文档对象模型（DOM，Document Object Model）是针对 XML 但经过扩展用于 HTML 的应用程序编程接口（API）。<br>示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这个页面的分层节点为：<br>html<br>|–head<br>|  +title<br>|   +Sample Page<br>|–body<br>|  +p<br>|   +Hello world!<br>DOM 2级引入了新的模块，同时给除了总多新类型和新接口的定义，DOM3 级进一步扩展了 DOM，引入了以统一方式加载和保存文档的方法，同时对 DOM 核心进行了扩展，开始支持 XML1.0 规范。DOM 接口可以<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model" target="_blank" rel="external">点击</a>查看。</p>
<h2 id="3-浏览器对象模型（BOM）"><a href="#3-浏览器对象模型（BOM）" class="headerlink" title="3. 浏览器对象模型（BOM）"></a>3. 浏览器对象模型（BOM）</h2><p>BOM 从根本上来说只处理浏览器窗口和框架。但是习惯上也把所有针对浏览器的 JavaScript 扩展算作 BOM 的一部分，包括弹出新浏览器窗口的功能，移动缩放和关闭浏览器的功能，对 cookie 的支持等。</p>
<h1 id="3-JavaScript-版本"><a href="#3-JavaScript-版本" class="headerlink" title="3. JavaScript 版本"></a>3. JavaScript 版本</h1><p>可<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/New_in_JavaScript" target="_blank" rel="external">点击</a>查看。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Express 学习记录：开始一个简单的开始项目]]></title>
      <url>http://blog.jxdjayden.cn/2016/07/31/Express/Express%E4%B8%8A%E6%89%8B%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%BC%80%E5%A7%8B%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p>由于公司的项目要求，最近在开始学习 node.js 以及跟着阮一峰老师写的 nodejs 教程学习 Express。于是在自己的 blog 记录一下学习过程。Express 是目前最流行的基于 Node.js 开发框架，可以快速地搭建一个网站。</p>
<h1 id="1-新建目录"><a href="#1-新建目录" class="headerlink" title="1. 新建目录"></a>1. 新建目录</h1><p>新建一个项目目录 <code>$ mkdir myapp</code> 在该目录下新建一个 package.json 文件，该文件定义了项目的名字，描述，版本，同时指定需要的 Express 版本。</p>
<pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"myapp"</span>,</div><div class="line">    <span class="string">"description"</span>: <span class="string">"Express test app"</span>,</div><div class="line">    <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</div><div class="line">    <span class="string">"private"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"express"</span>: <span class="string">"4.x"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><a id="more"></a>
<h1 id="2-安装-Express"><a href="#2-安装-Express" class="headerlink" title="2. 安装 Express"></a>2. 安装 Express</h1><p>然后使用命令 <code>npm install</code> 进行安装。安装成功会显示：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">├── range-parser@1.2.0</div><div class="line">├── content-type@1.0.2</div><div class="line">├── cookie@0.3.1</div><div class="line">├── encodeurl@1.0.1</div><div class="line">├── utils-merge@1.0.0</div><div class="line">├── merge-descriptors@1.0.1</div><div class="line">├── methods@1.1.2</div><div class="line">├── serve-static@1.11.1</div><div class="line">├── fresh@0.3.0</div><div class="line">├── path-to-regexp@0.1.7</div><div class="line">├── depd@1.1.0</div><div class="line">├── qs@6.2.0</div><div class="line">├── on-finished@2.3.0 (ee-first@1.1.1)</div><div class="line">├── finalhandler@0.5.0 (unpipe@1.0.0, statuses@1.3.0)</div><div class="line">├── debug@2.2.0 (ms@0.7.1)</div><div class="line">├── proxy-addr@1.1.2 (forwarded@0.1.0, ipaddr.js@1.1.1)</div><div class="line">├── accepts@1.3.3 (negotiator@0.6.1, mime-types@2.1.11)</div><div class="line">├── type-is@1.6.13 (media-typer@0.3.0, mime-types@2.1.11)</div><div class="line">└── send@0.14.1 (destroy@1.0.4, statuses@1.3.0, ms@0.7.1, mime@1.3.4, http-errors@1.5.0)</div></pre></td></tr></table></figure>
</code></pre><h1 id="3-初步尝试"><a href="#3-初步尝试" class="headerlink" title="3. 初步尝试"></a>3. 初步尝试</h1><p>安装成功后，在项目根目录下新建一个启动文件，可命名为 index.js，并输入：</p>
<pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app=express();</div><div class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">    res.send(<span class="string">"Hello,world!"</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Sever has started'</span>);</div><div class="line">&#125;);</div><div class="line">app.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure>
</code></pre><p>然后在命令行使用命令 <code>node index.js</code> 运行脚本，就可以通过 <a href="http://localhost:8000" target="_blank" rel="external">http://localhost:8000</a>来访问网站。上面代码会在本机的 8000 端口启动一个网站，网页显示 Hello World。<br><strong>req (请求) 和 res (响应) 与 Node 提供的对象完全一致，因此，你可以调用 req.pipe()、req.on(‘data’, callback) 以及任何 Node 提供的方法。</strong><br><strong>app.get</strong> 方法用于指定不同的访问路径所对应的回调函数，这叫做“路由”（routing）。路由是指如何定义应用的端点（URIs）以及如何响应客户端的请求。</p>
<h1 id="4-合并-routes"><a href="#4-合并-routes" class="headerlink" title="4. 合并 routes"></a>4. 合并 routes</h1><p>如果有多个路由，那么可以新建一个 router.js 文件，把所有 routes 都放到一起。</p>
<pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    \\router.js</div><div class="line">    <span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</div><div class="line">        app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">            res.send(<span class="string">'Hello world'</span>);</div><div class="line">        &#125;);</div><div class="line">        app.get(<span class="string">'/start'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">            res.send(<span class="string">'start'</span>);</div><div class="line">        &#125;);</div><div class="line">        app.get(<span class="string">'/upload'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">            res.send(<span class="string">'upload'</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="string">``</span><span class="string">`    </span></div><div class="line">同时修改 index.js </div><div class="line"></div><div class="line">    `<span class="string">``</span>JavaScript</div><div class="line">    \\index.js</div><div class="line">    <span class="keyword">var</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line">    <span class="keyword">var</span> app=express();</div><div class="line">    <span class="keyword">var</span> routes=<span class="built_in">require</span>(<span class="string">'./router.js'</span>)(app);</div><div class="line">    app.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure>
</code></pre><p>这时，如果在浏览器访问 <a href="http://localhost:8000/start" target="_blank" rel="external">http://localhost:8000/start</a> ，网页会显示 start。访问 <a href="http://localhost:8000/start" target="_blank" rel="external">http://localhost:8000/upload</a> 会显示 upload。<br>这样我们就简单的构建了一个项目网站。并且可以在本地通过 http:/localhost:8000 来访问，同时可以对不同的 URL 进行响应，显示不同的内容。 </p>
<blockquote>
<p>参考：<a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc5" target="_blank" rel="external">《JavaScript 标准参考教程（alpha）》</a>，by 阮一峰</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git 学习：标签管理及自定义]]></title>
      <url>http://blog.jxdjayden.cn/2016/07/31/git/git%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%A0%87%E7%AD%BE%E7%AE%A1%E7%90%86%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89/</url>
      <content type="html"><![CDATA[<h1 id="1-标签管理"><a href="#1-标签管理" class="headerlink" title="1. 标签管理"></a>1. 标签管理</h1><p>发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。</p>
<h2 id="1-创建标签"><a href="#1-创建标签" class="headerlink" title="1. 创建标签"></a>1. 创建标签</h2><ul>
<li><p>切换到需要打标签的分支上，然后输入命令 <code>git tag &lt;name&gt;</code> 可以打一个新标签。</p>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div><div class="line">Switched to branch <span class="string">'master'</span></div><div class="line">Your branch is ahead of <span class="string">'origin/master'</span> by 2 commits.</div><div class="line">(use <span class="string">"git push"</span> to publish your <span class="built_in">local</span> commits)</div></pre></td></tr></table></figure>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag v1.0</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li>使用命令 <code>git tag</code> 查看所有标签。</li>
<li><p>默认标签是打在最新提交的 commit 上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？方法是找到历史提交的 commit id，然后打上就可以了。</p>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> --pretty=oneline --abbrev-commit</div><div class="line">fb06fb2 merge with no-ff</div><div class="line">0c2bd74 merge <span class="built_in">test</span></div><div class="line">7<span class="built_in">cd</span>3de6 remove test.txt</div><div class="line">431726c add test.txt</div><div class="line">16c3889 change</div><div class="line">5860a7e change</div><div class="line">dddb972 append GPL</div><div class="line">b7b6289 change</div><div class="line">7c700be wrote a readme file</div></pre></td></tr></table></figure>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 给 16c3889 打标签  --&gt;</div><div class="line">$ git tag v0.9 16c3889</div><div class="line">&lt;!-- 可以用 git show &lt;tagname&gt; 查看标签信息 --&gt;</div><div class="line">$ git show v0.9</div><div class="line">commit 16c3889893bc972eb4ca47848cbd18faade022d5</div><div class="line">Author: jayden-J &lt;jxdlinhere@outlook.com&gt;</div><div class="line">Date:   Thu May 12 00:19:54 2016 +0800</div><div class="line">    change</div><div class="line">diff --git a/readme.md b/readme.md</div><div class="line">index d7f679f..329ec83 100644</div><div class="line">--- a/readme.md</div><div class="line">+++ b/readme.md</div><div class="line">@@ -1,3 +1,2 @@</div><div class="line"><span class="comment"># Git is a distributed version control system.</span></div><div class="line"><span class="comment"># Git is free software distributed under the GPL.</span></div><div class="line">-My stupid boss still prefers SVN.</div><div class="line">\ No newline at end of file</div></pre></td></tr></table></figure>
</li>
<li><p>可以创建带有说明的标签，用 -a 指定标签名，-m 指定说明文字。用命令 <code>git show &lt;tagname&gt;</code> 可以看到说明文字。</p>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ git tag <span class="_">-a</span> v0.1 -m <span class="string">"version 0.1"</span> 7<span class="built_in">cd</span>3de6</div><div class="line">&lt;!-- 查看标签信息 --&gt;</div><div class="line">$ git show v0.1</div><div class="line">tag v0.1</div><div class="line">Tagger: jayden-J &lt;jxdlinhere@outlook.com&gt;</div><div class="line">Date:   Mon May 16 12:19:33 2016 +0800</div><div class="line">version 0.1</div><div class="line">commit 7<span class="built_in">cd</span>3de65d8e5f4efb7c5f1630f330bb651aac600</div><div class="line">Author: jayden-J &lt;jxdlinhere@outlook.com&gt;</div><div class="line">Date:   Thu May 12 12:32:59 2016 +0800</div><div class="line">remove test.txt</div><div class="line">diff --git a/test.txt b/test.txt</div><div class="line">deleted file mode 100644</div><div class="line">index ce79696..0000000</div><div class="line">--- a/test.txt</div><div class="line">+++ /dev/null</div><div class="line">@@ -1 +0,0 @@</div><div class="line">-01010</div><div class="line">\ No newline at end of file</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2-管理标签"><a href="#2-管理标签" class="headerlink" title="2. 管理标签"></a>2. 管理标签</h2><ul>
<li>命令 <code>git push origin &lt;tagname&gt;</code> 可以推送一个本地标签。</li>
<li>命令 <code>git push origin --tags</code> 可以推送全部未推送过的本地标签。</li>
<li>命令 <code>git tag -d &lt;tagname&gt;</code> 可以删除一个本地标签。</li>
<li>命令 <code>git push origin :refs/tags/&lt;tagname&gt;</code> 可以删除一个远程标签。</li>
</ul>
<h1 id="2-自定义"><a href="#2-自定义" class="headerlink" title="2. 自定义"></a>2. 自定义</h1><h2 id="1-改变颜色"><a href="#1-改变颜色" class="headerlink" title="1. 改变颜色"></a>1. 改变颜色</h2><p>使用命令 <code>git config --global color.ui true</code> 让 Git 显示颜色，会让命令输出看起来更醒目。</p>
<h2 id="2-忽略文件"><a href="#2-忽略文件" class="headerlink" title="2. 忽略文件"></a>2. 忽略文件</h2><p>想要忽略特殊文件，可以在 Git 工作区的根目录下创建一个特殊的 .gitignore 文件，然后把要忽略的文件名填进去，Git 就会自动忽略这些文件。需要注意的是 .gitignore 文件本身要放到版本库里，并且可以对 .gitignore 做版本管理。</p>
<blockquote>
<p>不需要从头写 .gitignore 文件，GitHub 已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：<a href="https://github.com/github/gitignore" target="_blank" rel="external">https://github.com/github/gitignore</a></p>
</blockquote>
<p><em>检验.gitignore的标准是git status命令是不是说working directory clean。</em></p>
<h2 id="3-忽略文件的原则"><a href="#3-忽略文件的原则" class="headerlink" title="3. 忽略文件的原则"></a>3. 忽略文件的原则</h2><ul>
<li>忽略操作系统自动生成的文件，比如缩略图等；</li>
<li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如 Java 编译产生的 .class 文件；</li>
<li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li>
</ul>
<p>git 的学习记录大概就是这些了。有更多的在以后遇到再来补充。</p>
<blockquote>
<p>参考：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">《Git 教程》</a>，by 廖雪峰</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git 学习：远程仓库使用]]></title>
      <url>http://blog.jxdjayden.cn/2016/07/29/git/git%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="1-远程仓库建立（以-github-为例）"><a href="#1-远程仓库建立（以-github-为例）" class="headerlink" title="1. 远程仓库建立（以 github 为例）"></a>1. 远程仓库建立（以 github 为例）</h1><ol>
<li>创建 SSH Key</li>
</ol>
<ul>
<li>打开 git Bash（linux打开shell），使用 <code>$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code>创建 SSH Key 你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key 的秘钥对，id_rsa 是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人。</li>
</ul>
<a id="more"></a>
<ol>
<li>登录 Github ，打开 “Account settings”，“SSH Keys” 页面：然后，点 “Add SSH Key”，填上任意 Title，在 Key 文本框里粘贴 id_rsa.pub 文件的内容。</li>
<li>创建 Github 仓库</li>
</ol>
<ul>
<li>登陆 GitHub，然后，在右上角找到 “Create a new repo” 按钮，创建一个新的仓库在 Repository name 填入 learngit，其他保持默认设置，点击 “Create repository” 按钮，就成功地创建了一个新的 Git 仓库。</li>
</ul>
<ol>
<li>与本地的仓库连接</li>
</ol>
<ul>
<li>在本地的仓库中运行 <code>$ git remote add origin git@github.com:yourgithubname/learngit.git</code> 命令；添加后，远程库的名字就是 origin，这是 Git 默认的叫法，也可以改成别的，但是 origin 这个名字一看就知道是远程库。</li>
</ul>
<ol>
<li><p>把本地库的内容推送到远程库上：</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ git push -u origin master</div><div class="line">The authenticity of host <span class="string">'github.com (192.30.252.128)'</span> can<span class="string">'t be established.</span></div><div class="line">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</div><div class="line">Are you sure you want to continue connecting (yes/no)? yes</div><div class="line">Warning: Permanently added 'github.com,192.30.252.128<span class="string">' (RSA) to the list of known hosts.</span></div><div class="line">Counting objects: 19, done.</div><div class="line">Delta compression using up to 4 threads.</div><div class="line">Compressing objects: 100% (13/13), done.</div><div class="line">Writing objects: 100% (19/19), 1.55 KiB | 0 bytes/s, done.</div><div class="line">Total 19 (delta 4), reused 0 (delta 0)</div><div class="line">To git@github.com:jayden-J/learngit.git</div><div class="line"></div><div class="line"> *[new branch]      master -&gt; master</div><div class="line">Branch master set up to track remote branch master from origin.</div></pre></td></tr></table></figure>
</li>
<li><p>从现在起，只要本地作了提交，就可以通过命令：<code>git push origin master</code>把本地master分支的最新修改推送至 GitHub.<br>当你第一次使用 Git 的 clone 或者 push 命令连接 GitHub 时，会得到一个警告：</p>
<blockquote>
<p>The authenticity of host ‘github.com (xx.xx.xx.xx)’ can’t be established.<br><br>RSA key fingerprint is xx.xx.xx.xx.xx.<br><br>Are you sure you want to continue connecting (yes/no)?</p>
</blockquote>
</li>
</ol>
<p>这是因为 Git 使用 SSH 连接，而 SSH 连接在第一次验证 GitHub 服务器的 Key 时，需要你确认 GitHub 的 Key 的指纹信息是否真的来自 GitHub 的服务器，输入 yes 回车即可。</p>
<h1 id="2-从远程库克隆"><a href="#2-从远程库克隆" class="headerlink" title="2. 从远程库克隆"></a>2. 从远程库克隆</h1><p>假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。</p>
<ol>
<li>登陆 Github ,创建一个新的仓库 gitskills 。</li>
<li>在本地使用命令 <code>git clone</code> 克隆一个本地库。<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git@github.com:jayden-J/gitskills.git</div><div class="line">Cloning into <span class="string">'gitskills'</span>...</div><div class="line">Warning: Permanently added the RSA host key <span class="keyword">for</span> IP address <span class="string">'192.30.252.129'</span> to the list of known hosts.</div><div class="line">remote: Counting objects: 3, done.</div><div class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</div><div class="line">Receiving objects: 100% (3/3), done.</div><div class="line">Checking connectivity... done.</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="3-分支管理"><a href="#3-分支管理" class="headerlink" title="3. 分支管理"></a>3. 分支管理</h1><ol>
<li><p>创建分支,使用 <code>git checkout -b name</code>。</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b dev</div><div class="line">Switched to a new branch <span class="string">'dev'</span></div></pre></td></tr></table></figure>
</li>
<li><p>查看分支，使用 <code>git branch</code>。git branch 命令会列出所有分支，当前分支前面会标一个*号。 </p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git branch</div><div class="line">*dev</div><div class="line">master</div></pre></td></tr></table></figure>
</li>
<li><p>合并分支，<code>git merge</code> 命令用于合并指定分支到当前分支。</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git merge dev</div><div class="line">Updating d6f1ed3..177508b</div><div class="line">Fast-forward</div><div class="line">README.md | 3 ++-</div><div class="line">1 file changed, 2 insertions(+), 1 deletion(-)</div></pre></td></tr></table></figure>
</li>
</ol>
<p><em>注意到上面的 Fast-forward 信息，Git 告诉我们，这次合并是“快进模式”，也就是直接把 master 指向 dev 的当前提交，所以合并速度非常快。</em></p>
<ol>
<li><p>删除分支，使用 <code>git branch -d name</code> 命令。</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git branch <span class="_">-d</span> dev</div><div class="line">Deleted branch dev (was 177508b).</div></pre></td></tr></table></figure>
</li>
<li><p>解决分支冲突</p>
<ul>
<li>创建新的分支 featurel 并修改 README.md 内容后提交修改。</li>
<li>切换到 master 分支并修改一下内容。</li>
<li><p>这种情况下，Git 无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突。   </p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git merge featurel</div><div class="line">Auto-merging README.md</div><div class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> README.md</div><div class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</div></pre></td></tr></table></figure>
</li>
<li><p>查看 readme.md 的文件内容：</p>
<blockquote>
<p>#gitskills<br><br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br><br>Creating a new branch is quick &amp; simple.<br><br> =======<br><br>Creating a new branch is quick AND simple.<br><br>>>>>>>>featurel</p>
</blockquote>
</li>
<li><p>Git 用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，我们修改成“ Creating a new branch is quick and simple.  ”后保存。然后提交。</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">"conflict fixed"</span></div><div class="line">[master b1ebfb2] conflict fixed</div></pre></td></tr></table></figure>
</li>
<li><p>用 <code>git log --graph</code> 命令可以看到分支合并图。</p>
</li>
<li>最后删除分支 featurel 。</li>
</ul>
</li>
</ol>
<h1 id="4-分支管理策略"><a href="#4-分支管理策略" class="headerlink" title="4. 分支管理策略"></a>4. 分支管理策略</h1><ol>
<li><p>在合并分支时，如果使用 <em>–no-ff</em> 方式的 git merge ，Git 就会在 merge 时生成一个新的 commit ，这样，从分支历史上就可以看出分支信息。</p>
<ul>
<li>创建分支 dev ，修改 readme.md 文件内容，并提交 commit 。</li>
<li>切换回 master ，准备合并 dev 分支，请注意 –no-ff 参数，表示禁用 Fast forward 。    <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git merge --no-ff -m <span class="string">"merge with no-ff"</span> dev</div><div class="line">Merge made by the <span class="string">'recursive'</span> strategy.</div><div class="line"> readme.md | 1 +</div><div class="line"> 1 file changed, 1 insertion(+)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>分支策略</p>
</li>
</ol>
<p><em>master 分支必须是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活。工作都在 dev 分支上，也就是说，dev 分支是不稳定的，到某个时候，比如 1.0 版本发布时，再把 dev 分支合并到 master 上，在 master 分支发布 1.0 版本。</em></p>
<ol>
<li><p>当手头工作没有完成时，先把工作现场 git stash 一下，然后去修复 bug ，修复后，可以用 git stash list 查看。想要恢复，一是用 git stash apply 恢复，但是恢复后，stash 内容并不删除，你需要用 git stash drop 来删除；另一种方式是用 git stash pop ，恢复的同时把 stash 内容也删了。</p>
</li>
<li><p>Feature 分支</p>
<ul>
<li>每添加一个新功能，最好新建一个 feature 分支，在上面开发，完成后，合并，最后，删除该 feature 分支。</li>
<li><p>创建新分支,并创建新的文件，然后提交 commit 。</p>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b feature-valcan</div><div class="line">Switched to a new branch <span class="string">'feature-valcan'</span></div></pre></td></tr></table></figure>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git add valcan.md</div><div class="line">$ git status</div><div class="line">On branch feature-valcan</div><div class="line">Changes to be committed:</div><div class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</div><div class="line">new file:   valcan.md</div></pre></td></tr></table></figure>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">"add feature vulcan"</span></div><div class="line">[feature-valcan 34b1ae9] add feature vulcan</div><div class="line"> 1 file changed, 1 insertion(+)</div><div class="line"> create mode 100644 valcan.md</div></pre></td></tr></table></figure>
</li>
<li><p>如果要丢弃一个没有被合并过的分支，可以通过 g<code>it branch -D &lt;name&gt;</code> 强行删除。 </p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git branch -D feature-valcan</div><div class="line">Deleted branch feature-valcan (was 34b1ae9).</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>多人协作</p>
<ul>
<li><p>要查看远程库的信息，用 <code>git remote</code> 。更详细的信息可以使用 <code>gti remote -v</code> 查看。</p>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git remote</div><div class="line">origin</div></pre></td></tr></table></figure>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git remote -v</div><div class="line">origin  git@github.com:jayden-J/learngit.git (fetch)</div><div class="line">origin  git@github.com:jayden-J/learngit.git (push)</div></pre></td></tr></table></figure>
</li>
<li><p>推送分支</p>
<ul>
<li>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，<code>git push origin &lt;branch name&gt;</code>，Git就会把该分支推送到远程库对应的远程分支上.</li>
<li>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？<blockquote>
<p>master分支是主分支，因此要时刻与远程同步；<br><br>dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；<br><br>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；<br><br>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>参考：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">《Git 教程》</a>，by 廖雪峰</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git 学习：git 基本使用]]></title>
      <url>http://blog.jxdjayden.cn/2016/07/29/git/git%E5%AD%A6%E4%B9%A0%E4%B9%8Bgit%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>前段时间根据廖雪峰的 git 教程自学了一遍 git 的使用，同时写了三篇文章记录自己的学习心得，最近新开了 blog，于是把这三篇文章转到这里。</p>
<h1 id="1-windows-下-git-的安装"><a href="#1-windows-下-git-的安装" class="headerlink" title="1. windows 下 git 的安装"></a>1. windows 下 git 的安装</h1><ul>
<li>可以通过 <a href="https://git-scm.com/download/win" target="_blank" rel="external">https://git-scm.com/download/win</a>安装 git，然后打开 Git Bash 即可进行 git 操作。</li>
<li><p>安装完成后需要输入以下命令来完成安装：</p>
<pre><code><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"Your Name"</span></div><div class="line">$ git config --global user.email <span class="string">"email@example.com"</span></div></pre></td></tr></table></figure>
</code></pre><blockquote>
<p>注意：注意 <code>git config</code> 命令的–lobal 参数，用了这个参数，表示你这台机器上所有的 Git 仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和 Email 地址。</p>
</blockquote>
</li>
</ul>
<a id="more"></a>
<h1 id="2-创建版本库-repository"><a href="#2-创建版本库-repository" class="headerlink" title="2. 创建版本库 ( repository )"></a>2. 创建版本库 ( repository )</h1><ol>
<li><p>选择一个合适的地方创建一个空目录：</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ mkdir learngit</div><div class="line">$ <span class="built_in">cd</span> learngit</div><div class="line">$ <span class="built_in">pwd</span></div><div class="line">&lt;!-- /C/Users/J/learngit --&gt;这个是执行<span class="built_in">pwd</span>之后建立目录成功的提示</div></pre></td></tr></table></figure>
</li>
<li><p>通过 <code>git init</code> 命令把这个目录变成 Git 可以管理的仓库：</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git init </div><div class="line">&lt;!-- 成功后会显示：Initialized empty Git repository <span class="keyword">in</span> C:/Users/J/learngit/.git/--&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="3-创建文件并放入-Git-仓库。"><a href="#3-创建文件并放入-Git-仓库。" class="headerlink" title="3. 创建文件并放入 Git 仓库。"></a>3. 创建文件并放入 Git 仓库。</h1><ol>
<li>在 learngit 目录或者子目录下创建文件 readme.md（内容可以随意填写）</li>
<li><p>使用命令 <code>git add</code> 把文件添加到仓库：</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git add readme.md</div><div class="line">&lt;!-- 执行上面的命令，没有任何显示，这就对了。没有消息就是好消息--&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>用命令 <code>git commit -m &quot;提交说明&quot;</code>把文件提交到 Git 仓库： </p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">"wrote a readme file"</span></div><div class="line">[master (root-commit) 7c700be] wrote a readme file</div><div class="line">1 file changed, 2 insertions(+)</div><div class="line">create mode 100644 readme.md</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：commit 可以一次提交很多文件，所以你可以多次 add 不同的文件然后再 commit。</p>
</blockquote>
</li>
</ol>
<h1 id="4-git-仓库状态查看"><a href="#4-git-仓库状态查看" class="headerlink" title="4. git 仓库状态查看"></a>4. git 仓库状态查看</h1><ol>
<li><p>随意修改 readme.md 文件的内容，然后运行 <code>git status</code> 命令：</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">(use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</div><div class="line">(use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</div><div class="line">        modified:   readme.md</div><div class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>git diff</code> 查看具体修改内容</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git diff</div><div class="line">diff --git a/readme.md b/readme.md</div><div class="line">index a44167d..dad5a43 100644</div><div class="line">--- a/readme.md</div><div class="line">+++ b/readme.md</div><div class="line">@@ -1,2 +1,2 @@</div><div class="line">-<span class="comment"># Git is a version control system.</span></div><div class="line">+<span class="comment"># Git is a distributed version control system.</span></div><div class="line"> <span class="comment"># Git is free software.</span></div><div class="line">\ No newline at end of file</div></pre></td></tr></table></figure>
</li>
<li><p>查看最近提交记录，使用 <code>git log</code> 命令，使用 <code>git log --pretty=oneline</code> 可以看到 commit id 。</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span></div><div class="line">commit dddb972b47b06fd278fdce768722488ecb709970</div><div class="line">Author: jayden-J &lt;jxdlinhere@outlook.com&gt;</div><div class="line">Date:   Wed May 11 23:13:47 2016 +0800</div><div class="line">    append GPL</div><div class="line">commit b7b6289f3b852598d397479e26b18dbd0e61a172</div><div class="line">Author: jayden-J &lt;jxdlinhere@outlook.com&gt;</div><div class="line">Date:   Sat May 7 00:15:45 2016 +0800</div><div class="line">    change</div><div class="line">commit 7c700be0d59333b6a61d93aade7d678ee49b7c85</div><div class="line">Author: jayden-J &lt;jxdlinhere@outlook.com&gt;</div><div class="line">Date:   Fri May 6 23:02:23 2016 +0800</div><div class="line">    wrote a readme file</div><div class="line">$ git <span class="built_in">log</span> --pretty=oneline</div><div class="line">dddb972b47b06fd278fdce768722488ecb709970 append GPL</div><div class="line">b7b6289f3b852598d397479e26b18dbd0e61a172 change</div><div class="line">7c700be0d59333b6a61d93aade7d678ee49b7c85 wrote a readme file</div></pre></td></tr></table></figure>
</li>
<li><p>如何回退到以前的版本</p>
<ol>
<li>在 Git 中，用 HEAD 表示当前版本，，上一个版本就是 HEAD^，上上一个版本就是 HEAD^^，往上 100 个版本写 100 个^比较容易数不过来，所以写成 HEAD~100</li>
<li><p>回到上一个版本可以使用 <code>git reset</code> 命令</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard HEAD^</div><div class="line">HEAD is now at b7b6289 change</div></pre></td></tr></table></figure>
</li>
<li><p>回退之后如何恢复原来的新版本呢？只要原来的命令行窗口没有关闭，还可以看得到 “append URL” 的 commit URL；这时候就可以使用 <code>git reset --hard &quot;commit id&quot;</code> 来恢复到之前的版本。</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard dddb972b</div><div class="line">HEAD is now at dddb972 append GPL</div></pre></td></tr></table></figure>
</li>
<li><p>查看命令历史，可以使用 <code>git reflog</code> 。</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git reflog</div><div class="line">dddb972 HEAD@&#123;0&#125;: reset: moving to dddb972b</div><div class="line">b7b6289 HEAD@&#123;1&#125;: reset: moving to HEAD^</div><div class="line">dddb972 HEAD@&#123;2&#125;: commit: append GPL</div><div class="line">b7b6289 HEAD@&#123;3&#125;: commit: change</div><div class="line">7c700be HEAD@&#123;4&#125;: commit (initial): wrote a readme file</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<h1 id="5-撤销修改"><a href="#5-撤销修改" class="headerlink" title="5. 撤销修改"></a>5. 撤销修改</h1><ol>
<li><p>在没有添加修改到暂存区前不小心保存了错误的修改，可以使用 <code>git checkout --file</code> 来让文件回到最近一次 <code>git commit</code> 或 <code>git add</code> 时的状态。</p>
<blockquote>
<p>命令 git checkout – readme.md 意思就是，把 readme.md 文件在工作区的修改全部撤销，<br>这里有两种情况：<br>一种是 readme.md 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是 readme.md 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>
</blockquote>
<p> <code>git checkout -- file</code> 命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到 <code>git checkout</code> 命令。</p>
</li>
<li><p>保存了错误的修改并且添加到暂存区了，可以先用命令 <code>git reset HEAD file</code> 把暂存区的修改撤销掉，重新放回工作区；</p>
</li>
</ol>
<h1 id="6-删除文件"><a href="#6-删除文件" class="headerlink" title="6. 删除文件"></a>6. 删除文件</h1><ul>
<li><p>一般情况下，可以直接在文件管理器中把没用的文件删了，或者使用 <code>rm file</code> 命令把文件删除。这时用 <code>git status</code> 命令可以查看哪些文件被删除了。 </p>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">(use <span class="string">"git add/rm &lt;file&gt;..."</span> to update what will be committed)</div><div class="line">(use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</div><div class="line">deleted:    test.txt</div><div class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>现在如果确实要从版本库中删除该文件，可以使用命令 <code>git rm</code> 删除，并且 <code>git commit</code>。</p>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git rm test.txt</div><div class="line">rm <span class="string">'test.txt'</span></div><div class="line">$ git commit -m <span class="string">"remove test.txt"</span></div><div class="line">[master 7<span class="built_in">cd</span>3de6] remove test.txt</div><div class="line">1 file changed, 1 deletion(-)</div><div class="line">delete mode 100644 test.txt</div></pre></td></tr></table></figure>
</li>
<li><p>另一种情况是删错了，那么可以使用 <code>git checkout</code> 命令来恢复误删的文件。</p>
</li>
</ul>
<blockquote>
<p>参考：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">《Git 教程》</a>，by 廖雪峰</p>
</blockquote>
]]></content>
    </entry>
    
  
  
</search>
