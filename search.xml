<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[迟到的 2016 年的总结]]></title>
      <url>http://blog.jxdjayden.cn/2017/01/13/%E6%80%BB%E7%BB%93/2016%20%E5%B9%B4%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>其实 2017 年已经开始了快十几天了，我才动手写 2016 年的总结。前段时间一直在复习考试，所以总结一直被搁浅。现在考完试终于可以好好梳理一下自己过去一年了。</p>
<h2 id="毫无建树的上半年"><a href="#毫无建树的上半年" class="headerlink" title="毫无建树的上半年"></a>毫无建树的上半年</h2><p>这个标题好像很消极，但事实上它很好地概括了我 2016 年上半年的经历。说实话，关于我上半年的经历、收获，我几乎回想不起来了，从过完年回到学校，我基本上是在找实习、投简历和面试中度过的。感觉是浑浑厄厄的半年，其实很遗憾又懊悔，在大学的大多数的时光里，几乎都这样浑浑厄厄的过去了。到现在接近毕业，实在是懊恼无比。</p>
<a id="more"></a>
<h2 id="初次实习的夏末"><a href="#初次实习的夏末" class="headerlink" title="初次实习的夏末"></a>初次实习的夏末</h2><p>2016 年的 7 月至 9 月底，是我第一次实习，之前只做过一次外包的项目。那个时候的感觉，就像一头初出茅庐的小牛犊，啥也不懂的撞进了新世界。在这段时间里，我学习到了很多知识，也把自己的码力往上提了提。这段时间的实习总结，可以看这篇文章：<a href="http://blog.jxdjayden.cn/2016/09/30/%E6%80%BB%E7%BB%93/20160930%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/">《基础知识真的很重要！！！记三个月的实习》</a>。这段时间里，我还投身找工作的大军中，得到了一份还过去的 offer ，希望毕业后可以在金蝶学习到更多的知识。</p>
<h2 id="在-WhatYouNeed-的美妙日子"><a href="#在-WhatYouNeed-的美妙日子" class="headerlink" title="在 WhatYouNeed 的美妙日子"></a>在 WhatYouNeed 的美妙日子</h2><p>9 月底，因为学业的原因，我从实习的公司辞职了。然后在师兄师姐们创业的公司里实习，跟着有代码洁癖的年兽工作。其实我是很抱歉的，因为自己在这两个月里写了一堆 bug 出来，幸而年兽给了我足够多的时间来 debug，并且很耐心地 code review 。曾经我以为自己已经算得上一个强迫症了，然而 😪 ，是我太天真了。年兽的强迫症才算是强迫症……这两个月里，我对 html 和 CSS 的熟悉程度有了很大的提升。当初入坑前端的时候，因为没有人带、加上自己的懒惰，导致我对 html 和 CSS 都是囫囵吞枣，一知半解。年兽不止一次的说：“你写的页面结构是什么鬼，简直是一坨翔”。而且不好的页面结构也给我自己带来了许多麻烦，每次都是后知后觉，遇到 bug 才知道哪里写的不好，哪里有更好的写法。</p>
<p>除此之外，在移动端页面开发方面也收获了很多经验，因为我在实习期间做的项目基本上就是在移动端上使用的。整个过程踩了数不尽的坑。为了适配不同的设备耗费了很多时间。使用 vue2.0 也让自己对 mvvm 框架有了一些了解。</p>
<p>其实这段实习让我收获最多的不是具体什么方法或者什么框架的使用，而是年兽对于编程的态度影响我很多，知道了自己最大的问题是我的态度以及懒散，这是很致命的缺点。2017 年希望可以克服这个问题。</p>
<h2 id="和罐罐一起做项目的时光"><a href="#和罐罐一起做项目的时光" class="headerlink" title="和罐罐一起做项目的时光"></a>和罐罐一起做项目的时光</h2><p>在 2017 年的下半年里，我还和<a href="http://garychang.cn/" target="_blank" rel="external">罐罐</a>接了一个外包的项目，当然要非常感谢金主 vivi 的信任。唔，顺带提一下 vivi，vivi 是我大学认识的第一个学姐，她算得上是我的人生导师之一，（虽然我经常黑她，但是我是很感激她的。）vivi 对我大学这几年的帮助和影响是巨大的。真的非常谢谢她。好了， 回正题，这个项目，有面向用户的网站，以及客户使用地后台。前端后端都是用 js 。后端是罐罐用 koa 写的。后台我们用了 vue2.0 加 element UI，网站用 artTemplate 做后端渲染，同时使用了 gulp 和 scss 来简化工作。目前网站还在测试中。具体的项目代码可以点击<a href="https://github.com/JxJayden/node-CMS" target="_blank" rel="external">这个链接</a>查看，开源的版本会比项目代码落后几个版本。接下来会继续做优化。罐罐也是一个很有趣的人，和他一起工作非常有趣。算是 2016 年认识的少有的可以交心的朋友。</p>
<h2 id="关于咖啡"><a href="#关于咖啡" class="headerlink" title="关于咖啡"></a>关于咖啡</h2><p>今年接近年末的时候，终于开始入坑手冲咖啡，自己买了器具，学习着手冲一杯好喝的咖啡。很爽，真的。</p>
<h2 id="关于感情"><a href="#关于感情" class="headerlink" title="关于感情"></a>关于感情</h2><p>谢谢我的女朋友，一年来都没怎么和我吵过架，她忍受了我很多的毛病和问题，虽然她没说，我也常常忽略了。但是我自己回顾过来，心里是很清楚她给予了我很多的包容。唔，2017 年继续走下去。</p>
<h2 id="2016-年的遗憾"><a href="#2016-年的遗憾" class="headerlink" title="2016 年的遗憾"></a>2016 年的遗憾</h2><p><strong>书读的太少，空想的太多</strong></p>
<h2 id="2017-年想要实现的事情"><a href="#2017-年想要实现的事情" class="headerlink" title="2017 年想要实现的事情"></a>2017 年想要实现的事情</h2><ol>
<li>在前端方面更进一步，读更多的书，写更多的代码，思考的更多。</li>
<li>不能止步于前端，要加强自己在算法，数据结构，编译原理，计算机原理方面的知识。（面试的时候因为这方面的缺失，错过了很多好机会。）</li>
<li>努力学习手冲，最起码，可以自己泡出一杯好喝的咖啡。</li>
<li>阅读更多非技术类的书籍。</li>
<li><strong>把英语学好！！！</strong></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS 高程学习 8：Object 类型]]></title>
      <url>http://blog.jxdjayden.cn/2016/10/14/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A0/JS-learn-8/</url>
      <content type="html"><![CDATA[<p>终于慢慢地刷到第五章引用类型。这真的是一本很好的书，值得慢慢看。引用类型的值（对象）是引用类型的一个实例，对象是对某个特定引用类型的实例。今天来看一下 Object 类型。</p>
<h2 id="如何创建-Object-实例"><a href="#如何创建-Object-实例" class="headerlink" title="如何创建 Object 实例"></a>如何创建 Object 实例</h2><p>看代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用 new 操作符后跟 Object 构造函数</span></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">person.name = <span class="string">"Jayden"</span>;</div><div class="line">person.age = <span class="number">21</span>;</div><div class="line"></div><div class="line"><span class="comment">// 使用对象字面量方法 推荐使用</span></div><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">  name : <span class="string">"Jayden"</span>,</div><div class="line">  age: <span class="number">21</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 这里要注意一下语法，对象的最后一个属性后面不需要添加逗号，</span></div><div class="line"><span class="comment">// 在 IE7 以及更早版本的 Opera 中会引发错误。</span></div><div class="line"></div><div class="line"><span class="comment">// 在使用对象字面量方法的时候，如果留空，则定义只包含默认属性和方法的对象</span></div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">// 与 new Object() 相同</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>为什么使用对象字面量语法更好呢？一是因为这种语法要求的代码量少，而且能够给人封装数据的感觉。</p>
<h2 id="访问对象的方法"><a href="#访问对象的方法" class="headerlink" title="访问对象的方法"></a>访问对象的方法</h2><p>一般访问对象属性时使用的是点表示法，不过在 JavaScript 中还可以通过方括号表示法来访问对象的属性。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">person.name; <span class="comment">// "Jayden"</span></div><div class="line">person.[<span class="string">"name"</span>]; <span class="comment">// "Jayden"</span></div></pre></td></tr></table></figure>
<p>看起来这两种方法都没什么区别，但是方括号表示法有一个好处是可以通过变量来访问属性。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nameType = <span class="string">"name"</span>;</div><div class="line">person.[nameType]; <span class="comment">// "Jayden"</span></div></pre></td></tr></table></figure>
<p>哦，如果属性名中包含会导致语法错误的字符，或者属性名使用的是关键字或保留字，也可以使用方括号表示法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">person[<span class="string">"first name"</span>] = <span class="string">"Jayden"</span>;</div></pre></td></tr></table></figure>
<p>通常情况下，除非必须使用变量来访问属性，一般建议使用点表示法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数组的优雅降维]]></title>
      <url>http://blog.jxdjayden.cn/2016/10/09/JavaScript/%E6%95%B0%E7%BB%84%E7%9A%84%E4%BC%98%E9%9B%85%E9%99%8D%E7%BB%B4/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这个月开始在新的公司开始实习，昨天是第一天～然后技术负责人让我先完成一些基础练习。回顾基础知识其实学到很多。这段时间会陆续记录下来。</p>
</blockquote>
<h2 id="问题是什么"><a href="#问题是什么" class="headerlink" title="问题是什么"></a>问题是什么</h2><p>这次要记录的一个问题是数组的降维。这是一个蛮有趣的问题，在解决问题的过程中学到了挺多有趣的有用的基础知识，在这里除了给出自己的答案之外，还会记录一下自己搜索到的解决方法。先来看一下题目：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]], <span class="number">5</span>, [<span class="number">6</span>]];</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 把多维数组转换为一维数组。</div><div class="line"> *</div><div class="line"> * 比如[1, [2, [3, 4]], 5, [6]]在flatten之后的结果应该是[1,2,3,4,5,6]</div><div class="line"> *</div><div class="line"> * @param array 要flatten的数组。</div><div class="line"> * @returns Array flatten之后的一维数组。</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">var</span> flattenMd = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(flattenMd(a)); <span class="comment">// [1,2,3,4,5,6]</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="我的思路"><a href="#我的思路" class="headerlink" title="我的思路"></a>我的思路</h2><p>当时看到题目第一反应就是用递归。什么是递归呢，这里就不解释了。不了解的同学可以点击<a href="https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92" target="_blank" rel="external">链接</a>查看 wiki 的解释。（需要翻墙）<br>我最开始写的方法是这样的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> flattenMd = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arr = [];</div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">arguments</span>.length &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="string">'没有传递参数'</span>;</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">var</span> flaEle = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">    a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">ele, index, array</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (ele <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</div><div class="line">        flaEle(ele);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        arr.push(ele);</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  flaEle(array);</div><div class="line">  <span class="keyword">return</span> arr;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="网上的方法"><a href="#网上的方法" class="headerlink" title="网上的方法"></a>网上的方法</h2><p>这样写很不优雅 😔，但是为了能够保持 arr ，所以只能在内部多一个函数来进行递归。不甘心的我默默地打开了 Google。wow，来看看<a href="http://www.cnblogs.com/front-end-ralph/p/4871332.html" target="_blank" rel="external">这篇文章</a>介绍的三种常用的转换方法：（以下代码将以把二维数组降维到一维数组为例。）</p>
<h3 id="法一：朴素的转换："><a href="#法一：朴素的转换：" class="headerlink" title="法一：朴素的转换："></a>法一：朴素的转换：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用双重循环遍历数组</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduceDimension</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> reduced = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</div><div class="line">        reduced.push(arr[i][j]);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  <span class="keyword">return</span> reduced;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="法二：利用-concat-转换"><a href="#法二：利用-concat-转换" class="headerlink" title="法二：利用 concat 转换"></a>法二：利用 concat 转换</h3><p>MDN 中对 concat 方法的介绍：</p>
<blockquote>
<p>Array.prototype.concat()：The concat() method returns a new array comprised of the array on which it is called joined with the array(s) and/or value(s) provided as arguments.<br>concat creates a new array consisting of the elements in the object on which it is called, followed in order by, for each argument, the elements of that argument (if the argument is an array) or the argument itself (if the argument is not an array).<br>concat 方法将创建一个新的数组，然后将调用它的对象(this 指向的对象)中的元素以及所有参数中的数组类型的参数中的元素以及非数组类型的参数本身按照顺序放入这个新数组,并返回该数组。</p>
</blockquote>
<p>所以我们可以这样实现：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduceDimension</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> reduced = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</div><div class="line">        reduced = reduced.concat(arr[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> reduced;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为什么可以这样呢？因为 arr 的每一个元素都是一个数组或者是单独的元素，作为 concat 方法的参数，数组中的每一个子元素又都会被独立插入进新数组。</p>
<h3 id="法三：利用-apply-和-concat-转换"><a href="#法三：利用-apply-和-concat-转换" class="headerlink" title="法三：利用 apply 和 concat 转换"></a>法三：利用 apply 和 concat 转换</h3><p>当当当，这是作者安利的很棒的方法。好的，先看看 MDN 文档：</p>
<blockquote>
<p>Function.prototype.apply()：The apply() method calls a function with a given this value and arguments provided as an array (or an array-like object).<br>Syntax：fun.apply(thisArg, [argsArray])</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduceDimension</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.concat.apply([], arr);</div><div class="line">&#125;</div><div class="line"><span class="comment">// arr作为apply方法的第二个参数，本身是一个数组，</span></div><div class="line"><span class="comment">// 数组中的每一个元素（还是数组，即二维数组的第二维）</span></div><div class="line"><span class="comment">// 会被作为参数依次传入到concat中，</span></div><div class="line"><span class="comment">// 效果等同于[].concat([1,2], [3,4], [5,6])。</span></div></pre></td></tr></table></figure>
<h2 id="最后的答案"><a href="#最后的答案" class="headerlink" title="最后的答案"></a>最后的答案</h2><p>这种方法是不是很奇妙呢？～但是我要解决的问题是多维数组啊～那么要怎样来实现递归解决问题呢？实际上还是有一些问题要解决的。最后我实现的方法是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> flattenMd = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> result = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(array[i] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</div><div class="line">            result = result.concat(flattenMd(array[i]));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            result.push(array[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这种方法比我一开始写的方法更加好了，当然如果你有更好的方法，请一定要告诉我哦！谢谢。<br>最后，年兽（技术负责人）问我，你知道多维数组转换成字符串再转换成数组会发生什么吗？我摇摇头，他很猥琐的一笑，表示你自己试试。于是我打开 chrome 的调试工具：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]], <span class="number">5</span>, [<span class="number">6</span>]];</div><div class="line"><span class="built_in">console</span>.log(a.join().split(<span class="string">','</span>)); </div><div class="line"></div><div class="line"><span class="comment">// ["1", "2", "3", "4", "5", "6"]</span></div><div class="line"><span class="comment">// join 方法如果参数为空，默认使用逗号连接每个元素。</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Array.prototype.join()<br>语法：str = arr.join([separator = ‘,’])<br>解释：Optional. Specifies a string to separate each element of the array. The separator is converted to a string if necessary. If omitted, the array elements are separated with a comma. If separator is an empty string, all elements are joined without any characters in between them.</p>
</blockquote>
<p>wow，是不是很神奇！～直接把多维数组变成一维数组了～不过这样是有局限性的，相信你一眼也看得出来。数字被转换成字符、元素不只是数字或字符的时候会出问题，如果某个元素有逗号那么在 split 的时候会分割成两个。所以具体的实现还是需要做一些处理的。这里只是想记录一下学习的过程～</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://www.cnblogs.com/front-end-ralph/p/4871332.html" target="_blank" rel="external">优雅的数组降维——Javascript中apply方法的妙用</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank" rel="external">Array.prototype.concat</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join" target="_blank" rel="external">Array.prototype.join()</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="external">Function.prototype.apply()</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS 高程学习 7：关于基本类型和引用类型的介绍]]></title>
      <url>http://blog.jxdjayden.cn/2016/10/07/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A0/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A07_%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h2 id="基本类型和引用类型的值"><a href="#基本类型和引用类型的值" class="headerlink" title="基本类型和引用类型的值"></a>基本类型和引用类型的值</h2><p>ECMAScript 变量可能包含两种不同数据类型的值：基本类型值和引用类型值。注意引用类型的值是保存在内存中的对象。而JavaScript 是不允许直接访问内存中的位置，因此在操作对象的时候，实际上是操作对象的引用而不是实际的对象。但是在为对象添加属性的时候，操作的是实际的对象。</p>
<h2 id="动态的属性"><a href="#动态的属性" class="headerlink" title="动态的属性"></a>动态的属性</h2><ol>
<li>对于引用类型的值，我们可以为其添加属性和方法，也可以改变或删除。</li>
<li>但是不能给基本类型的值添加属性。</li>
</ol>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;&#125;;</div><div class="line">person.name = <span class="string">'Jayden'</span>;</div><div class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// "Jayden"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> name = <span class="string">'Jayden'</span>;</div><div class="line">name.age = <span class="string">'21'</span>; <span class="comment">// 无效，但不会引起错误</span></div><div class="line"><span class="built_in">console</span>.log(name.age); <span class="comment">// "undefined"</span></div></pre></td></tr></table></figure>
<h2 id="复制变量值"><a href="#复制变量值" class="headerlink" title="复制变量值"></a>复制变量值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 基本类型的值复制会创建一个新值</span></div><div class="line"><span class="keyword">var</span> num1 = <span class="number">5</span>;</div><div class="line"><span class="keyword">var</span> num2 = num1;</div><div class="line"></div><div class="line"><span class="comment">// num2 只是 num1 中 5 的一个副本，对这两个变量进行任何操作都不会互相影响。</span></div><div class="line">num1 = <span class="number">6</span>;</div><div class="line"><span class="built_in">console</span>.log(num1); <span class="comment">// 6</span></div><div class="line"><span class="built_in">console</span>.log(num2); <span class="comment">// 5</span></div></pre></td></tr></table></figure>
<p>从一个变量向另一个变量复制引用类型的值的时候，同样也会将存储在变量对象中的值复制一份放到为新变量分配的空间中，不同的是，这个值的副本实际上是一个指针，这个指针指向存储在堆中的一个变量对象。复制操作结束后，两个变量实际上引用同一个对象。上代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"><span class="keyword">var</span> obj2 = obj1;</div><div class="line">obj1.name = <span class="string">'Jayden'</span>;</div><div class="line"><span class="built_in">console</span>.log(obj2.name); <span class="comment">// "Jayden"</span></div><div class="line"></div><div class="line">obj2.name = <span class="string">'K'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(obj1.name); <span class="comment">// "K"</span></div></pre></td></tr></table></figure>
<h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><p>ECMAScript 所有函数的参数都是按值传递的，即是把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量中，也就是说引用类型值的传递，跟引用类型变量的复制也是一样的。上代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTen</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  num += <span class="number">10</span>;</div><div class="line">  <span class="keyword">return</span> num;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> count = <span class="number">20</span>;</div><div class="line"><span class="keyword">var</span> result = addTen(count);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(count); <span class="comment">// 20;</span></div><div class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 30;</span></div><div class="line"></div><div class="line"><span class="comment">// 引用类型值的传递</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  obj.name = <span class="string">"Jayden"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person = &#123;&#125;;</div><div class="line">setName(person);</div><div class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// "Jayden"</span></div><div class="line"></div><div class="line"><span class="comment">// 但是要注意参数实际上还是按值传递的，看例子：</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  obj.name = <span class="string">'Jayden'</span>;</div><div class="line">  obj = &#123;&#125;;</div><div class="line">  obj.name = <span class="string">'K'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person = &#123;&#125;;</div><div class="line">setName(person);</div><div class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// "Jayden"</span></div></pre></td></tr></table></figure>
<p>最后一个例子说明了如果 person 是按引用传递的，那么 person 应该会被修改为指向 name 为 “K” 的新对象。但是在外部访问 person.name 的时候，其值依然为 “Jayden”。说明即使在函数内部修改了参数的值，但原始的引用仍然保持不变。实际上，当在函数内部重写 obj 时，这个变量引用的是一个局部对象了。</p>
<h2 id="检测类型"><a href="#检测类型" class="headerlink" title="检测类型"></a>检测类型</h2><p>要检测一个变量是不是基本数据类型，可以使用 typeof 操作符，但是如果变量的值是一个对象或 null ，则 typeof 就有点犯傻了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</div><div class="line"><span class="keyword">var</span> b = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">typeof</span> a; <span class="comment">// "object"</span></div><div class="line"><span class="keyword">typeof</span> b; <span class="comment">// "object"</span></div></pre></td></tr></table></figure>
<p>说到这里，你肯定很奇怪为什么 <code>typeof null</code> 返回 object 呢？这个问题我之前也一直很疑惑，直到前段时间有个微信群里的一个朋友解释了原因：</p>
<blockquote>
<p>不同的对象在底层都表示为二进制，在 JavaScript 中二进制前三位都为 0 的话会被判断为 object 类型，null 的二进制表示是全 0，自然前三位也是 0，所以执行 typeof 时会返回“object”。</p>
</blockquote>
<p>恍然大悟。果然学无止境～<br>那么在如何检测某个值是不是对象，并且它是什么类型的对象呢？呐，<code>instanceof</code>。看代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a-z]/i</span>;</div><div class="line"></div><div class="line">person <span class="keyword">instanceof</span> <span class="built_in">Object</span>; <span class="comment">// true</span></div><div class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>; <span class="comment">// true</span></div><div class="line">reg <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>; <span class="comment">// true</span></div><div class="line"><span class="literal">null</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>; <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>注意：所有引用类型的值都是 Object 的实例。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基础知识真的很重要！！！记三个月的实习]]></title>
      <url>http://blog.jxdjayden.cn/2016/09/30/%E6%80%BB%E7%BB%93/20160930%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>今天是三个月实习的最后一天，这三个月总得来说学习到很多东西，虽然到后期因为每天给隔壁公司的渣前端填坑（每天填坑时间占工作时间 50%），所以知识增长速度极度下降，但是同时对我的耐心以及我的基础知识都磨砺了一遍。不过实在是课太多，只能离职回来学校好好学习了。国庆并没有打算去哪里旅游，其实是不想去人挤人，于是打算宿舍、咖啡店、健身房来回。今晚趁着新鲜且尚未忘怀的记忆做一些实习总结吧。</p>
<a id="more"></a>
<h2 id="关于前端的基础知识以及规范"><a href="#关于前端的基础知识以及规范" class="headerlink" title="关于前端的基础知识以及规范"></a>关于前端的基础知识以及规范</h2><p>其实自己之前除了有些代码洁癖之外，对于前端的规范是知之甚少，毕竟一个人在写代码总是懒得去遵循一个规范。然而在工作中，特别是团队合作，这样的行为往往是致命的，我自己就因为其他前端不遵循公司的代码规范乱写 JavaScript ，导致我去查 bug 的时候极其痛苦，最后实在受不了直接全部重新撸了一遍。<br>我实习的公司是一家不知名的小公司，但是因为老板也是技术出身，对团队技术要求较高，同时公司内有一个技术大神，所以我们对于代码的规范也有一些要求，这个算是我实习中学到的最重要的也是最基础的一个规则。良好的代码规范对于团队合作，甚至是个人工作都是必要的。是的，你不会想到当你想去重构一个月前自己写下的代码时，剪不清理还乱的痛。<br>推荐三个代码规范：</p>
<ol>
<li><a href="https://github.com/fex-team/styleguide" target="_blank" rel="external">百度 FEX 的文档与代码规范</a>；</li>
<li><a href="https://github.com/google/styleguide" target="_blank" rel="external">Google Style Guides</a>；</li>
<li><a href="https://github.com/airbnb/javascript" target="_blank" rel="external">Airbnb JavaScript Style Guide</a>。</li>
</ol>
<p>插播一句：</p>
<blockquote>
<p>在我写着实习总结的时候，正好一个前端交流微信群里，有人分享了为什么 <code>typeof null == &#39;object&#39;</code> 的原因，趁新鲜记录一下，之后再做详细介绍：<strong>不同的对象在底层都表示为二进制，在 JavaScript 中二进制前三位都为 0 的话会被判断为 object 类型，null 的二进制表示是全 0，自然前三位也是 0，所以执行 typeof  时会返回“object”。</strong><br>关于 typeof 的简单归纳可以查看我之前的 blog：<a href="http://blog.jxdjayden.cn/2016/08/05/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A0/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/">JavaScript 高程学习 3：数据类型</a>。之后有空会再写篇文章说一下。（挖个坑）<br>好了，接着总结。除了代码规范之外，审查别人的代码也让我把 HTML 和 CSS 的基础知识全都过了一遍，是的，隔壁公司的渣前端还会在一个 div 中定义两个 class 。🙄️🙄️🙄️ （为什么隔壁公司的事情我会管呢， 因为我们公司占有他们公司的股份）之前自己老是觉得 HTML 和 CSS 太简单，不想去深入学习，感觉 JavaScript 才是光明大道，但是现在我发现，一屋不扫何以扫天下，CSS 都学不好怎样做一个好前端？接下来会多写一些博文来记录一些 HTML 和 CSS 的基础知识，帮助自己记忆以及梳理。</p>
</blockquote>
<h2 id="关于-JavaScript-的学习"><a href="#关于-JavaScript-的学习" class="headerlink" title="关于 JavaScript 的学习"></a>关于 JavaScript 的学习</h2><h3 id="基础知识很重要！！！"><a href="#基础知识很重要！！！" class="headerlink" title="基础知识很重要！！！"></a>基础知识很重要！！！</h3><p>这个基础知识，不仅仅是指 JavaScript 的基础知识，同样代表着算法和数据结构的基础知识。今天在知乎看到一篇翻译的文章：<a href="https://zhuanlan.zhihu.com/p/22714957" target="_blank" rel="external">软件开发技艺精进之路</a>。其中作者讲了自己对于软件开发者精进之路的思考，他把这个过程分为三个阶段：</p>
<blockquote>
<p>为了易于表达，我们把编程能力划分为简化的场景：</p>
<ul>
<li>基础：所有相关于算法、数据结构、计算机科学问题、应用设计原则（SOLID, KISS, DRY, SoC）、扩展性。</li>
<li>语言：所有相关于编程语言（Javascript, Swift, Java），语法、操作符、变量、编译器。</li>
<li>框架：所有相关于框架（AngularJS, ReactJS, Cocoa Touch）与平台（Browser, NodeJS）。 </li>
</ul>
<ol>
<li>初学者：倒三角形<br><img src="http://odgdn5u95.bkt.clouddn.com/20160930%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%931.png" alt="" title="初学者"></li>
<li>熟练工：矩形<br><img src="http://odgdn5u95.bkt.clouddn.com/20160930%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%932.png" alt="" title="熟练工"></li>
<li>专家：正三角形<br><img src="http://odgdn5u95.bkt.clouddn.com/20160930%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%933.png" alt="" title="专家"><br>作者建议：<br>流行框架甚至编程语言迟早会过时。他们将会被更好的工具所替代：这是进化的必然结果。你能够做的事情就是把重点放在基础上。<br>当然基础学习起来有些难。有些算法难于理解与记忆。我的建议是「玩得开心」：你可以多次去阅读一个算法。想着其好处可能导致一个特殊的数据结构（译者备注这里可能翻译的不对）。挑战自己，变得越来越牛。<br>不管基础是难的这个事实，有个愉快的奖励：它不会经常改变。从 80 年代甚至 70 年代创建至现在，算法与数据结构没有什么重大的改变。一次性学习透了，然后不断重复，你就在正确在道路上了。</li>
</ol>
</blockquote>
<p>可以点击查看原文：<a href="https://rainsoft.io/the-path-of-software-development-craftsmanship/" target="_blank" rel="external">The path of software development craftsmanship</a>。<br>作为一个非计算机专业出身的前端开发者，在经过这段实习时间后，表示非常赞同这种看法，同时立个 flag 我要去补一补算法和数据结构！！</p>
<h3 id="框架其实不是最重要的"><a href="#框架其实不是最重要的" class="headerlink" title="框架其实不是最重要的"></a>框架其实不是最重要的</h3><p>这个问题是很多人在刚入门的时候会形成的错误，因为前端的框架有部分实在是太好用了，比如 jQuery 这种曾经风靡一代甚至现在都还非常流行（虽然很多人在说去 jQuery ，但是依旧有一大堆项目依赖着 jQuery 正常运行），但是千万不要错以为你会某个目前很流行的前端框架并且用的很溜，你就学会 JavaScript 了。最最重要的是你要去学会 JavaScript 的基础，研究透它，这个才是你可以赖以生存的真正技能（而不是 JS 框架）。<br>那么 JavaScript 要怎样学习呢？推荐阅读：<a href="http://www.w3cfuns.com/notes/17398/d3f6dd40e2d3ff15b209810dfa98be0b.html" target="_blank" rel="external">统一回复《怎么学JavaScript？》</a>。</p>
<h3 id="关于-node-js"><a href="#关于-node-js" class="headerlink" title="关于 node.js"></a>关于 node.js</h3><p>node.js 让前端开发者可以无痛地使用 JavaScript 进行后台开发，但是有个建议，不要花太多精力在 node.js 的框架上，先把 node.js 的基础学好，node 的 api 这些需要掌握的很好。舍本逐末，追求快速是一个很错误的选择。当然了， koa 很棒！</p>
<h2 id="关于其他杂七杂八的东西"><a href="#关于其他杂七杂八的东西" class="headerlink" title="关于其他杂七杂八的东西"></a>关于其他杂七杂八的东西</h2><h3 id="选择一家合适的实习公司"><a href="#选择一家合适的实习公司" class="headerlink" title="选择一家合适的实习公司"></a>选择一家合适的实习公司</h3><p>一家合适的实习公司对你个人的成长是非常有帮助的，而不合适的公司可以让你两三个月的时间白白荒废。所以，请不要觉得实习无所谓就随便选，认真对待，是对你自己负责也是对公司负责。选一家合适的公司需要考虑什么：</p>
<ol>
<li>你想在这家公司学到什么？团队合作经验？JavaScript 进阶？职场初体验？</li>
<li>这家公司给你的收获和你付出的成本会不会差太多？时间成本，精力成本？</li>
<li>这家公司的方向与你个人的兴趣之间会不会差异太大？当然了，如果你能够忍受做不感兴趣的工作可以忽略。</li>
<li>基本待遇怎样？虽然出来实习确实不应该太过于考虑工资这些，但是一家好的公司不会忽略人才。（电视台报社实习什么的不在参考范围）</li>
</ol>
<h3 id="如何学到东西"><a href="#如何学到东西" class="headerlink" title="如何学到东西"></a>如何学到东西</h3><ol>
<li>遇到问题虚心请教。基本路径：遇到问题➡️(百度或 Google）? 解决：问同事或导师。切勿遇到问题不经思考就直接提问。</li>
<li>阅读代码，好的代码就是好的老师，通过阅读牛逼同事的代码可以让你的能力以及编程思想快速提升。同样适用于各种优秀框架的源码。我在实习期间被逼着写一个比较重要的模块的前端代码文档，然后从头到尾详细阅读并思考技术大神同事写的代码，受益良多。</li>
<li>多做笔记，建议每天或者每周末对自己的一周工作做个总结，反省。当然了，上班的时候，就别写文了……</li>
<li>主动请教。在下班期间（午餐时间是一个非常棒的请教时间），主动地去问一些同事的学习经历以及获取他们的建议。往往你请同事吃个饭什么的，对方就会很乐意地跟你分享了。</li>
</ol>
<p>这篇总结并没详细地列出我在工作上获取的知识，因为我觉得阶段性总结最重要的是让我自己记住同时分享如何获取知识的方法以及让知识体系应该侧重的地方。而不是列个清单把自己掌握到的知识点一一写下来，这些在网上不计其数。如果这篇总结可以给你带来一些帮助，满足已。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[I am quiet inside]]></title>
      <url>http://blog.jxdjayden.cn/2016/09/27/lifestyle/quietinside/</url>
      <content type="html"><![CDATA[<p>分享一个自己很喜欢的独立品牌 <a href="https://shop73238177.taobao.com/" target="_blank" rel="external">TACITURNLI</a> 2016 秋冬型录。嗯，纯粹是作为一个粉丝的自我分享，相信你也不会觉得一个服装品牌会找流量几近零的 blog（而且还是码农）来打广告。TACITURNLI 最让我喜欢的是每一件衣物都会经过熏香，那个味道让我醉心不已。少说废话，来看图片。</p>
<p><img src="http://odgdn5u95.bkt.clouddn.com/31.jpg" alt="0"></p>
<a id="more"></a>
<p><img src="http://odgdn5u95.bkt.clouddn.com/9.jpg" alt="1"></p>
<p><img src="http://odgdn5u95.bkt.clouddn.com/18.jpg" alt="2"></p>
<p><img src="http://odgdn5u95.bkt.clouddn.com/13.jpg" alt="3"></p>
<p><img src="http://odgdn5u95.bkt.clouddn.com/6.jpg" alt="4"></p>
<p><img src="http://odgdn5u95.bkt.clouddn.com/24.jpg" alt="6"></p>
<p><img src="http://odgdn5u95.bkt.clouddn.com/20.jpg" alt="7"></p>
<p><img src="http://odgdn5u95.bkt.clouddn.com/27.jpg" alt="8"></p>
<p><img src="http://odgdn5u95.bkt.clouddn.com/32.jpg" alt="9"></p>
<p><img src="http://odgdn5u95.bkt.clouddn.com/28.jpg" alt="10"></p>
<p><img src="http://odgdn5u95.bkt.clouddn.com/33.jpg" alt="11"></p>
<p><img src="http://odgdn5u95.bkt.clouddn.com/41.jpg" alt="12"></p>
<p><img src="http://odgdn5u95.bkt.clouddn.com/44.jpg" alt="12"></p>
<p><img src="http://odgdn5u95.bkt.clouddn.com/40.jpg" alt="13"></p>
<p><img src="http://odgdn5u95.bkt.clouddn.com/6.jpg" alt="14"></p>
<p><img src="http://odgdn5u95.bkt.clouddn.com/8.jpg" alt="14"></p>
<p><img src="http://odgdn5u95.bkt.clouddn.com/9.jpg" alt="15"></p>
<p><img src="http://odgdn5u95.bkt.clouddn.com/29.jpg" alt="16"></p>
<p>也许你会很奇怪为什么我要在自己的 blog 里面放一篇跟代码毫无关系的文章，但就如我的 blog 名一样：代码与胡说。并且我认为程序员也是人，亦有自己的喜好，以及代码之外的乐趣。这就是我的喜好乐趣，也希望你可以享受代码之外的乐趣，有一句很老套的话：生活从来不缺少美，只是缺少发现美的眼睛。</p>
<p>文中所用图均来源于太格有物的<a href="http://www.thetigerhood.com/taciturnli-2/" target="_blank" rel="external">逃离是为了更好的生活 TACITURNLI 2016秋冬型录</a>一文。文中有句话我很喜欢：</p>
<blockquote>
<p>日常里的每一件事情都复杂得超出了我们的预期。它们要求你快速得做决定，积极的跟别人交流，要求你在完成一项工作之后立刻去着手下一个。事情越来越多，自己变成一种只会拼命做事的熟练工种，用繁忙去交换每一次完成的快感，以及生活上整体流动的状态。让你觉得日子在走，也不管是不是在原地打转。</p>
</blockquote>
<p>I used to be so hard to find<br>Rage and tears filled my eyes<br>But now I believe I see much clearer<br>My clarity did not come easily<br>My cell was knocked into me<br>But now at least I know who′s in the mirror<br>I am quiet inside</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浏览器对后退行为的处理]]></title>
      <url>http://blog.jxdjayden.cn/2016/09/23/browser/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E5%90%8E%E9%80%80%E8%A1%8C%E4%B8%BA%E7%9A%84%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p>今天在公司的项目中遇到 Firefox 一个很有趣的特性：在页面上点击了本页打开的链接，如果马上点一下 Firefox 的后退按钮，就会退回到之前的页面，并且原来页面的状态会被还原，包括 JavaScript 改变的 DOM 结构也会保持。举个栗子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://blog.jxdjayden.cn"</span>&gt;</span>Click Me!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">"the back button on Firefox"</span>);</div><div class="line">    <span class="keyword">var</span> i = <span class="number">1</span>;</div><div class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>).innerHTML = i++;</div><div class="line">    &#125;,<span class="number">1000</span>);</div><div class="line">  &#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>实测在 chrome (55.0.2867.1 canary SyzyASan) 中点后退时会触发之前页面的 window.onload 事件，并且计数器回到初始状态重新计数；而在 Firefox 中不会触发页面的 window.onload 事件，定时器会接着之前的状态继续计数。</p>
<p>但是我想要让 Firefox 后退的时候也触发 window.onload 事件怎么办呢？在 <a href="http://stackoverflow.com/questions/2638292/after-travelling-back-in-firefox-history-javascript-wont-run?ref=binfind.com" target="_blank" rel="external">stackoverflow</a> 上已经有人提问过这个问题了：</p>
<p>方法一：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://blog.jxdjayden.cn"</span>&gt;</span>blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"a1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">"the back button on browser"</span>);</div><div class="line">    <span class="keyword">var</span> i = <span class="number">1</span>;</div><div class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">document</span>.getElementById(<span class="string">"a1"</span>).innerHTML = i++;</div><div class="line">    &#125;,<span class="number">1000</span>);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line"><span class="comment">// 在页面插入：</span></div><div class="line">  <span class="built_in">window</span>.onunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>亲测有效，实际上就是在页面关闭的时会触发unload事件。参考：<a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunload" target="_blank" rel="external">MDN 文档</a>。</p>
<p>方法二：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://blog.jxdjayden.cn"</span>&gt;</span>blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"a1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="comment">// 添加 window.onpageshow 事件</span></div><div class="line">  <span class="built_in">window</span>.onload=<span class="built_in">window</span>.onpageshow = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">"the back button on browser"</span>);</div><div class="line">    <span class="keyword">var</span> i = <span class="number">1</span>;</div><div class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">document</span>.getElementById(<span class="string">"a1"</span>).innerHTML = i++;</div><div class="line">    &#125;,<span class="number">1000</span>);</div><div class="line">  &#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当一条会话历史记录被执行的时候将会触发页面显示( pageshow )事件，包括后退和前进按钮操作。参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/Events/pageshow" target="_blank" rel="external">MDN 文档</a>。</p>
<p>参考：</p>
<ol>
<li><a href="http://stackoverflow.com/questions/2638292/after-travelling-back-in-firefox-history-javascript-wont-run" target="_blank" rel="external">stackoverflow : After travelling back in Firefox history, JavaScript won’t run</a> ；</li>
<li><a href="https://imququ.com/post/go-back-in-browser.html" target="_blank" rel="external">不同浏览器处理后退的一些异同</a> 。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS 高程学习 6：函数]]></title>
      <url>http://blog.jxdjayden.cn/2016/09/21/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A0/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A06_%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionName</span>(<span class="params">arg0,arg1,….argN</span>)</span>&#123;</div><div class="line"> statements</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//示例</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name,message</span>)</span>&#123;</div><div class="line">alert(<span class="string">"hello"</span> + name + <span class="string">","</span> + message);</div><div class="line"></div><div class="line"><span class="comment">// 调用函数</span></div><div class="line">sayHi(<span class="string">"jayden"</span>,<span class="string">"how are you?"</span>);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>严格模式对函数有一些限制：</p>
<ol>
<li>不能把函数命名为 <code>eval</code> 或 <code>arguments</code>；</li>
<li>不能把参数命名为 <code>eval</code> 或 <code>arguments</code>；</li>
<li>不能出现两个命名参数同名的情况。</li>
</ol>
<p>如果发生以上情况，就会导致语法错误，代码无法执行。</p>
<h2 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h2><p>当一个函数被调用的时候，会从第一个语句开始执行，直到遇到关闭函数体的 <code>}</code> 时结束，然后函数把控制权交还给调用该函数的程序。<br><code>return</code> 语句可以用来使函数提前返回。当 <code>return</code> 被执行时，函数立即返回而不再执行余下的语句。一个函数总会返回一个值，如果没有指定返回值，则返回 <code>undefined</code>。<br>如果函数调用时在前面加上了 <code>new</code> 前缀，且返回值不是一个对象，则返回 <code>this</code> （该新对象）。</p>
<h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><p>ECMAScript 函数的参数与其他语言中的大有不同，在 ECMAScript 函数中不介意传递进来多少个参数，也不在意传递的参数是什么数据类型。在函数体内可以通过 arguments 对象来访问这个参数数组，从而获取传递给函数的每个参数。<br><strong>注意：<code>arguments</code> 只是和数组类似。并不是 <code>Array</code> 的实例。</strong><br>命名的参数只提供便利，但不是必须的。上面的函数可以重写为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">"hello"</span>+<span class="built_in">arguments</span>[<span class="number">0</span>]+<span class="string">","</span>+<span class="built_in">arguments</span>[<span class="number">1</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过访问 <code>arguments</code> 对象的 <code>length</code> 属性可以获知有多少个参数传递给了函数。<code>arguments</code> 对象可以和命名参数共同使用。同时，<code>arguments</code> 的值永远与对应的命名参数的值保持一致。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">  <span class="built_in">arguments</span>[<span class="number">1</span>] = <span class="number">10</span>;</div><div class="line">  alert(<span class="built_in">arguments</span>[<span class="number">0</span>] + num2);</div><div class="line">&#125;</div><div class="line"></div><div class="line">add(<span class="number">10</span>,<span class="number">5</span>); <span class="comment">// 20</span></div></pre></td></tr></table></figure>
<p>关于参数还有最后一点：没有被传递值的命名参数将被赋予 <code>undefined</code> 值。<br><strong>注意：ECMAScript 中的所有参数传递的都是值，不可能通过引用来传递参数。</strong></p>
<h2 id="没有重载"><a href="#没有重载" class="headerlink" title="没有重载"></a>没有重载</h2><p>ECMAScript 函数不能像其他语言一样实现重载。（因为不存在函数签名）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addSomething</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> num + <span class="number">100</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addSomething</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> num + <span class="number">200</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">addSomething(<span class="number">100</span>); <span class="comment">// 300</span></div></pre></td></tr></table></figure>
<p>函数 <code>addSomething()</code> 被定义了两次，所以后定义的函数会覆盖先定义的函数。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mac 的神兵利器]]></title>
      <url>http://blog.jxdjayden.cn/2016/09/08/software/mac%E7%9A%84%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>这个帖子用来记录自己的 mac 安装的各种软件。(持续更新)</p>
<h2 id="终端工具"><a href="#终端工具" class="headerlink" title="终端工具"></a>终端工具</h2><ol>
<li><a href="http://iterm2.com/" target="_blank" rel="external">iTerm2</a>：替代原生终端的强大工具。</li>
<li><a href="https://fishshell.com/" target="_blank" rel="external">fish</a>：a command line shell for the 90s。</li>
<li><a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">homebrew</a>：OS X 不可或缺的套件管理器，可以方便地让你用命令行安装很多东西。</li>
</ol>
<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><ol>
<li><a href="https://www.sublimetext.com/" target="_blank" rel="external">sublime text 3</a>：很好用的编辑器，从 windows 开始就一直用这个。<br>插件：待更新</li>
</ol>
<a id="more"></a>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li><a href="https://github.com/ZzzM/HostToolforMac" target="_blank" rel="external">HostsTool</a>：获取 hosts 更新的工具，你懂的～</li>
<li><a href="https://github.com/oldj/SwitchHosts" target="_blank" rel="external">SwitchHosts!</a>：方便的快速的 hosts 管理工具。</li>
<li><a href="http://zipzapmac.com/go2shell" target="_blank" rel="external">Go2Shell</a>：让你方便地在 finder 中打开 shell。</li>
<li><a href="https://kapeli.com/dash" target="_blank" rel="external">Dash</a>：强大的 api 离线文档查看软件，你不给它捐钱都不好意思。</li>
<li><a href="https://www.getpostman.com/" target="_blank" rel="external">Postman</a>：很强大的接口测试工具。</li>
<li><a href="https://www.sourcetreeapp.com" target="_blank" rel="external">SourceTree</a>：git 图形工具，可以用来做简单的 git 管理。</li>
<li><a href="https://www.sketchapp.com/" target="_blank" rel="external">Sketch</a>：很好用的切图工具。</li>
<li><a href="https://weflow.io/" target="_blank" rel="external">WeFlow</a>：一个高效、强大、跨平台的前端开发工作流工具。</li>
<li><a href="https://www.zennaware.com/cornerstone/store.php" target="_blank" rel="external">Cornerstone</a>：颜值很高的 svn 管理工具 。</li>
</ol>
<h2 id="效率、笔记及脑图工具"><a href="#效率、笔记及脑图工具" class="headerlink" title="效率、笔记及脑图工具"></a>效率、笔记及脑图工具</h2><ol>
<li><a href="https://www.alfredapp.com/" target="_blank" rel="external">Alfred3</a>：不解释</li>
<li><a href="https://www.typora.io/" target="_blank" rel="external">Typora</a>：很好看的 markdown 编辑软件</li>
<li><a href="https://leanote.com/" target="_blank" rel="external">Leanote</a>：笔记管理软件，支持 markdown ，支持 windows、mac、iOS 平台。</li>
<li><a href="https://www.mediaatelier.com/CheatSheet/" target="_blank" rel="external">CheatSheet</a>：快捷键查看工具。</li>
<li><a href="https://github.com/fikovnik/ShiftIt" target="_blank" rel="external">Shiftlt</a>：很好用的窗口管理工具。</li>
<li><a href="https://mindnode.com/" target="_blank" rel="external">Mindnode</a>：很好看的思维导图软件，iOS 最近限免中。</li>
<li><a href="http://www.xmindchina.net/" target="_blank" rel="external">XMind</a>：思维导图编辑软件。</li>
</ol>
<h2 id="阅读工具及邮箱"><a href="#阅读工具及邮箱" class="headerlink" title="阅读工具及邮箱"></a>阅读工具及邮箱</h2><ol>
<li><a href="https://itunes.apple.com/us/app/kindle-read-books-ebooks-magazines/id302584613?mt=8" target="_blank" rel="external">kindle</a>：不用多说，多看书～</li>
<li><a href="http://reederapp.com/beta3/" target="_blank" rel="external">reeder3</a>：设计超好看的 RSS 阅读器。</li>
<li><a href="https://getpocket.com/a/" target="_blank" rel="external">pocket</a>：read it later～</li>
<li><a href="https://inbox.google.com/" target="_blank" rel="external">inbox web</a>：gmail，可惜只有 web 版，没有 mac 的 app。</li>
<li><a href="https://www.google.com/calendar" target="_blank" rel="external">google 日历</a>：～～～不解释。</li>
</ol>
<h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><ol>
<li><a href="https://www.trankynam.com/xtrafinder/" target="_blank" rel="external">XtraFinder</a>：finder 扩展软件，很好用。</li>
<li><a href="https://www.dashlane.com/" target="_blank" rel="external">Dashlane</a>：密码管理软件，设计的很棒。免费账户够用了。</li>
<li><a href="https://itunes.apple.com/us/app/istatistica/id1025822138?mt=12" target="_blank" rel="external">iStatistica</a>：系统监视软件，比 iStat 好看。可以在 app store 搜索。</li>
<li><a href="https://aria2.github.io/" target="_blank" rel="external">aria2c</a>：很好用的命令行下载工具。</li>
<li><a href="http://cidian.youdao.com/index-mac.html" target="_blank" rel="external">有道词典</a>：划词翻译～</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6 的 generator 函数]]></title>
      <url>http://blog.jxdjayden.cn/2016/08/30/ES6/ES6%E7%9A%84generator%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>最近公司让我整理一些文档， 其中有些代码涉及到 ES6 的 generator（生成器）函数，还有 co 函数库，thunkify 函数库等，当时查了一些资料来理解。现在把这些东西整理一下。</p>
<h2 id="ES6-生成器（Generators）简介"><a href="#ES6-生成器（Generators）简介" class="headerlink" title="ES6 生成器（Generators）简介"></a>ES6 生成器（Generators）简介</h2><p>语法：</p>
<p><code>function* name([param[, param[, ... param]]]) { statements }</code></p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">test</span>(<span class="params">title</span>)</span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">"你好"</span>;</div><div class="line">  <span class="keyword">if</span>(title)&#123;</div><div class="line">    <span class="keyword">yield</span> title;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">yield</span> <span class="string">"bye"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><code>function*</code> 声明定义一个<strong>generator（生成器）函数</strong>，返回一个 <code>Generator</code> 对象。什么是 <code>generator</code> 函数呢？</p>
<blockquote>
<p><strong>生成器</strong>是一种可以从中退出并在之后重新进入的函数。生成器的环境（绑定的变量）会在每次执行后被保存，下次进入时可继续使用。 —— MDN</p>
</blockquote>
<p>来看一下上面定义的 test 函数被调用时发生了什么？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> t = test(<span class="string">'jayden'</span>); <span class="comment">//undefined 什么都没发生</span></div><div class="line">t.next(); </div><div class="line">&gt; <span class="built_in">Object</span> &#123;value: <span class="string">"你好"</span>, done: <span class="literal">false</span>&#125;</div><div class="line">t.next();</div><div class="line">&gt; <span class="built_in">Object</span> &#123;value: <span class="string">"jayden"</span>, done: <span class="literal">false</span>&#125;</div><div class="line">t.next();</div><div class="line">&gt; <span class="built_in">Object</span> &#123;value: <span class="string">"bye"</span>, done: <span class="literal">false</span>&#125;</div><div class="line">t.next();</div><div class="line">&gt; <span class="built_in">Object</span> &#123;value: <span class="literal">undefined</span>, done: <span class="literal">true</span>&#125;</div></pre></td></tr></table></figure>
<p>对于普通的函数，当你调用它们的时候，会立即开始执行，直到遇到 return 或者抛出异常才会退出执行。但是为什么这里却不一样呢？当你调用生成器函数时，并不马上执行它的主体，而是返回一个这个生成器函数的<strong>迭代器（iterator）对象</strong>。，而每次你调用生成器对象的 next() 方法时，函数会解冻自身并一直运行到下一个 yield 表达式。</p>
<p>next 方法返回一个拥有 value 和 done 两个字段的对象（ value 是每一个 yield 的右值，done 用来表示是否已经执行完）。当你下次调用 next，函数会从 yield 的下一个语句继续执行，等到整个函数执行完，next 方法返回的 done 字段会变成 true。如果 done 字段为 false，说明可以继续往下执行。</p>
<h2 id="yield-表达式"><a href="#yield-表达式" class="headerlink" title="yield 表达式"></a>yield 表达式</h2><p>yield 表达式定义了迭代器返回的值，或者被 yield* 指定的另一个生成器函数。来看看实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">test1</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">  <span class="keyword">yield</span> i+<span class="number">1</span>;</div><div class="line">  <span class="keyword">yield</span> i+<span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">test2</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">  <span class="keyword">yield</span> i;</div><div class="line">  <span class="keyword">yield</span>* test1(i);</div><div class="line">  <span class="keyword">yield</span> i+<span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> y = test2(<span class="number">2</span>);</div><div class="line"></div><div class="line">y.next();</div><div class="line">&gt; <span class="built_in">Object</span> &#123;value: <span class="number">2</span>, done: <span class="literal">false</span>&#125;</div><div class="line">y.next();</div><div class="line">&gt; <span class="built_in">Object</span> &#123;value: <span class="number">3</span>, done: <span class="literal">false</span>&#125;</div><div class="line">y.next();</div><div class="line">&gt; <span class="built_in">Object</span> &#123;value: <span class="number">4</span>, done: <span class="literal">false</span>&#125;</div><div class="line">y.next();</div><div class="line">&gt; <span class="built_in">Object</span> &#123;value: <span class="number">12</span>, done: <span class="literal">false</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><p>使用 ES6 的生成器函数来实现斐波那契数列（前两个数字都是 1 ，除此之外任何数字都是前两个数之和的数列）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fab</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line">  <span class="keyword">var</span> last = <span class="number">0</span>;</div><div class="line">  <span class="keyword">var</span> current = <span class="number">1</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">while</span>(value &gt; count++)&#123;</div><div class="line">    <span class="keyword">yield</span> current;</div><div class="line">    <span class="keyword">var</span> t = current;</div><div class="line">    current += last;</div><div class="line">    last = current;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> y = fab(<span class="number">12</span>);</div><div class="line"><span class="keyword">var</span> res;</div><div class="line"><span class="keyword">var</span> result = [];</div><div class="line"></div><div class="line"><span class="keyword">while</span>(!(res = y.next()).done)&#123;</div><div class="line">  result.push(res.value);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(result);  <span class="comment">//[1, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]</span></div></pre></td></tr></table></figure>
<p>参考：</p>
<ol>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators" target="_blank" rel="external">迭代器和生成器</a></li>
<li><a href="https://imququ.com/post/generator-function-in-es6.html" target="_blank" rel="external">ES6 中的生成器函数介绍</a></li>
<li><a href="http://www.infoq.com/cn/articles/es6-in-depth-generators" target="_blank" rel="external">深入浅出ES6（三）：生成器 Generators</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS 高程学习 5 ：语句]]></title>
      <url>http://blog.jxdjayden.cn/2016/08/21/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A0/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A05_%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<p>ECMAScript 规定了一组语句，也称为流控制语句。语句定义了 ECMAScript 中的主要语法，语句通常用一或多个关键字来完成任务。</p>
<h2 id="1-if-语句"><a href="#1-if-语句" class="headerlink" title="1. if 语句"></a>1. if 语句</h2><p>语法：<code>if(condition) statement1 else statement2</code> 。condition 可以是任意表达式，而且对整个表达式求值的结果不一定是布尔值，ECMAScript 会调用 Boolean 转换函数将这个表达式的结果转换为一个布尔值，如果对 condition 求值的结果为 true，则执行 statement1 ，否则执行 statement2 。statement1 和 statement2 语句可以是一行代码，或则是一个代码块，但是建议使用代码块（用花括号括起来的代码），方便他人阅读源码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(i&gt;<span class="number">25</span>)&#123;</div><div class="line">  alert(<span class="string">"i 大于 25"</span>);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</div><div class="line">  alert(<span class="string">"i 小于 0"</span>)；</div><div class="line">&#125; <span class="keyword">else</span>&#123;</div><div class="line">  alert(<span class="string">"i 大于 0，小于 25"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="2-do-while-语句"><a href="#2-do-while-语句" class="headerlink" title="2. do-while 语句"></a>2. do-while 语句</h2><p>do-while 语句是一种后测试循环语句，只有在循环体中的代码被执行后，才会测试出口条件。也就是说在对条件表达式求值之前，循环体内的代码至少会被执行一次。</p>
<p>语法及实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">  statement</div><div class="line">&#125; <span class="keyword">while</span> (expression)</div><div class="line"></div><div class="line"><span class="comment">//示例</span></div><div class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">  i+=<span class="number">2</span>;</div><div class="line">&#125; <span class="keyword">while</span>(i&lt;<span class="number">10</span>);</div></pre></td></tr></table></figure>
<h2 id="3-while-语句"><a href="#3-while-语句" class="headerlink" title="3. while 语句"></a>3. while 语句</h2><p>while 属于前测试语句，也就是说，在循环体内的代码被执行前，就会对条件求值。所以，循环体内的代码可能永远不被执行。语法：<code>while(expression) statement</code> 。实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(i&lt;<span class="number">10</span>)&#123;</div><div class="line">i += <span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-for-语句"><a href="#4-for-语句" class="headerlink" title="4. for 语句"></a>4. for 语句</h2><p>for 语句也是前测试循环语句，但它可以在执行循环之前初始化变量和定义循环后要执行的代码。语法及实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//语法</span></div><div class="line"><span class="keyword">for</span> (initialization;expression;post-loop-exression) statement</div><div class="line"><span class="comment">//实例</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">10</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; count;i++)&#123;</div><div class="line">  alert(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只有当条件表达式（i&lt;count）返回 true 的时候才会进入 for 循环，如果执行了循环体中的代码，则一定会对循环后的表达式（i++）求值。</p>
<p>由于 ECMAScript 中不存在块级作用域，所以在循环内部定义的变量在外部也可以访问到。如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> count = <span class="number">10</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; count;i++)&#123;alert(i);&#125;</div><div class="line">alert(i); <span class="comment">//10</span></div></pre></td></tr></table></figure>
<h2 id="5-for-in-语句"><a href="#5-for-in-语句" class="headerlink" title="5. for-in 语句"></a>5. for-in 语句</h2><p>for-in 是精准的迭代语句，可以用来枚举对象的属性。实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> propName <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</div><div class="line">  <span class="built_in">document</span>.write(propName);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-label-语句"><a href="#6-label-语句" class="headerlink" title="6. label 语句"></a>6. label 语句</h2><p>使用 label 语句可以在代码中添加标签，以便将来使用。语法：<code>label:statement</code> 。实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">start:<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; count;i++)&#123;alert(i);&#125;</div></pre></td></tr></table></figure>
<p>这个例子中定义的 start 标签可以在将来由 break 或 continue 语句引用。</p>
<h2 id="7-break-和-continue-语句"><a href="#7-break-和-continue-语句" class="headerlink" title="7. break 和 continue 语句"></a>7. break 和 continue 语句</h2><p>break 和 continue 语句用于在循环中精确地控制代码的执行。其中 break 语句会立即退出循环，强制继续执行循环后面的语句。而 continue 语句虽然也是立即退出循环，但退出循环后会从循环的顶部继续执行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//break</span></div><div class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt; <span class="number">10</span>;i++)&#123;</div><div class="line">  <span class="keyword">if</span>(i % <span class="number">5</span> == <span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">  num++;</div><div class="line">&#125;</div><div class="line">alert(num); <span class="comment">//4</span></div><div class="line"></div><div class="line"><span class="comment">//continue</span></div><div class="line">num = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span>;j &lt; <span class="number">10</span>;j++)&#123;</div><div class="line"><span class="keyword">if</span>(j % <span class="number">5</span> == <span class="number">0</span>)&#123;</div><div class="line">  <span class="keyword">continue</span>;</div><div class="line">&#125;</div><div class="line">num++;</div><div class="line">&#125;</div><div class="line">alert(num); <span class="comment">//8</span></div></pre></td></tr></table></figure>
<h2 id="8-with-语句"><a href="#8-with-语句" class="headerlink" title="8. with 语句"></a>8. with 语句</h2><p>with 语句的作用是将代码的作用域设置到一个特定的对象中，语法：<code>with (expression) statement</code>。实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span>(location)&#123;</div><div class="line"><span class="keyword">var</span> qs = search.substring(<span class="number">1</span>);</div><div class="line"><span class="keyword">var</span> hostName = hostname;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//等价于</span></div><div class="line"><span class="keyword">var</span> qs = location.search.substring(<span class="number">1</span>);</div><div class="line"><span class="keyword">var</span> hostName = location.hostName;</div></pre></td></tr></table></figure>
<h2 id="9-switch-语句"><a href="#9-switch-语句" class="headerlink" title="9. switch 语句"></a>9. switch 语句</h2><p>switch 语句也是流控制语句。语法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span>(expression)&#123;</div><div class="line">  <span class="keyword">case</span> value:statement;</div><div class="line">  <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> value:statement;</div><div class="line">  <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> value:statement;</div><div class="line">  <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">default</span>:statement;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span>(i)&#123;</div><div class="line">  <span class="keyword">case</span> <span class="number">25</span>:</div><div class="line">    <span class="comment">/* 合并两种情形 */</span></div><div class="line">  <span class="keyword">case</span> <span class="number">35</span>:</div><div class="line">    alert(<span class="string">"25 or 35"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="number">45</span>:</div><div class="line">    alert(<span class="string">"45"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    alert(<span class="string">"other"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 switch 语句中可以使用任意数据类型，并且每个 case 的值不一定是常量，可以是变量、表达式。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS 高程学习 4：操作符]]></title>
      <url>http://blog.jxdjayden.cn/2016/08/13/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A0/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A04_%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
      <content type="html"><![CDATA[<h2 id="1-一元操作符"><a href="#1-一元操作符" class="headerlink" title="1. 一元操作符"></a>1. 一元操作符</h2><p>只能操作一个值的操作符叫做一元操作符。</p>
<h3 id="1-递增和递减操作符"><a href="#1-递增和递减操作符" class="headerlink" title="1. 递增和递减操作符"></a>1. 递增和递减操作符</h3><p>递增和递减操作符有两个版本：前置型和后置型。执行前置递增和递减操作时，变量的值都是在语句被求值之前改变的。而后置递减和递减的操作是在包含它们的语句被求值后才执行的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//前置</span></div><div class="line"><span class="keyword">var</span> age = <span class="number">29</span>；</div><div class="line"><span class="keyword">var</span> tage = --age + <span class="number">2</span>；</div><div class="line"></div><div class="line">alert(age); <span class="comment">//28</span></div><div class="line">alert(tage); <span class="comment">//30</span></div><div class="line"></div><div class="line"><span class="comment">//前置的另一个例子</span></div><div class="line"><span class="keyword">var</span> num1 = <span class="number">2</span>;</div><div class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</div><div class="line"><span class="keyword">var</span> num3 = --num1 + num2; <span class="comment">// num3 = 21</span></div><div class="line"><span class="keyword">var</span> num4 = num1 + num2; <span class="comment">// num4 = 21</span></div><div class="line"></div><div class="line"><span class="comment">//后置</span></div><div class="line"><span class="keyword">var</span> num1 = <span class="number">2</span>;</div><div class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</div><div class="line"><span class="keyword">var</span> num3 = num1-- + num2; <span class="comment">// num3 = 22</span></div><div class="line"><span class="keyword">var</span> num4 = num1 + num2; <span class="comment">// num4 = 21</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>如果将操作符应用于一个不包含有效数字字符的字符串时，会将变量的值设置为 NaN。<br>如果将操作符应用在对象上，先调用对象的 valueof() 方法以取得一个可供操作的值，然后对该值应用操作符。如果结果是 NaN，则再调用 toString() 方法后再应用前述规则。</p>
<h3 id="2-一元加和减操作符"><a href="#2-一元加和减操作符" class="headerlink" title="2. 一元加和减操作符"></a>2. 一元加和减操作符</h3><p>把一元加操作符放在数值前面，对数值不会产生影响。但是对非数值应用一元加操作符时，该操作符会像 Number() 转型函数一样对这个值执行转换。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s1 = <span class="string">"01"</span>;</div><div class="line"><span class="keyword">var</span> s2 = <span class="string">"1.1"</span>;</div><div class="line"><span class="keyword">var</span> s3 = <span class="string">"z"</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</div><div class="line"><span class="keyword">var</span> f = <span class="number">1.1</span>;</div><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">    valueOf: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">-1</span>;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">s1 = +s1; <span class="comment">//1</span></div><div class="line">s2 = +s2; <span class="comment">//1.1</span></div><div class="line">s3 = +s3; <span class="comment">//NaN</span></div><div class="line">b = +b; <span class="comment">//0</span></div><div class="line">f = +f; <span class="comment">//1.1</span></div><div class="line">o = +o; <span class="comment">//-1</span></div></pre></td></tr></table></figure>
<p>一元减操作符应用于数值时，该值会变为负数。在应用于非数值时，遵循和一元加操作符相同的规则。</p>
<h2 id="2-位操作符"><a href="#2-位操作符" class="headerlink" title="2. 位操作符"></a>2. 位操作符</h2><p>位操作符用于在最基本的层次上，即按内存中表示数值的位来操作数值。（略过 ECMAScript 中数值的存储方式等内容。）注意以下的操作符都是在二进制下计算然后返回十进制的。</p>
<h3 id="1-按位非（NOT）"><a href="#1-按位非（NOT）" class="headerlink" title="1. 按位非（NOT）"></a>1. 按位非（NOT）</h3><p>按位非操作符由一个波浪线（~）表示，执行按位非的结果就是返回数值的反码。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num1 =<span class="number">25</span>; <span class="comment">//二进制按位非</span></div><div class="line"><span class="keyword">var</span> num2 = ~num1; <span class="comment">//-26</span></div></pre></td></tr></table></figure>
<h3 id="2-按位与（AND）"><a href="#2-按位与（AND）" class="headerlink" title="2. 按位与（AND）"></a>2. 按位与（AND）</h3><p>按位与操作符由一个 &amp; 字符表示，它有两个操作符数。按位与操作只在两个数值的对应位都是 1 时才返回 1，任何一位是 0 ，都返回 0。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = <span class="number">25</span> &amp; <span class="number">3</span>;<span class="comment">// 1</span></div></pre></td></tr></table></figure>
<h3 id="3-按位或（OR）"><a href="#3-按位或（OR）" class="headerlink" title="3. 按位或（OR）"></a>3. 按位或（OR）</h3><p>按位或操作符由一个竖线（|）符号表示，同样也有两个操作数。按位或操作在有一个位是 1 的情况下返回 1 ，只有在两个位都是 0 时才返回 0。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = <span class="number">25</span> | <span class="number">3</span>; <span class="comment">//27</span></div></pre></td></tr></table></figure>
<h3 id="4-按位异或（XOR）"><a href="#4-按位异或（XOR）" class="headerlink" title="4. 按位异或（XOR）"></a>4. 按位异或（XOR）</h3><p>按位异或操作符由一个插入符号（^）表示。按位异或操作在两个数值对应位上只有一个 1 时返回 1。如果对应位的两位都是 1 或 0，则返回 0 。</p>
<h3 id="5-左移"><a href="#5-左移" class="headerlink" title="5. 左移"></a>5. 左移</h3><p>左移操作符由两个小于号（&lt;&lt;）表示，这个操作符会将数值的所有位向左移动指定的位数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oldValue = <span class="number">2</span>;</div><div class="line"><span class="keyword">var</span> newValue = oldValue &lt;&lt; <span class="number">5</span>; <span class="comment">// 64</span></div></pre></td></tr></table></figure>
<h3 id="6-有符号的右移"><a href="#6-有符号的右移" class="headerlink" title="6. 有符号的右移"></a>6. 有符号的右移</h3><p>有符号的右移操作符用两个大于号（&gt;&gt;）表示。这个操作符会将数值向右移动，但保留符号位。</p>
<h3 id="7-无符号右移"><a href="#7-无符号右移" class="headerlink" title="7. 无符号右移"></a>7. 无符号右移</h3><p>无符号右移用三个大于号表示。这个操作符会将数值的所有 32 位都向右移动，对正数来说，无符号右移的结果与有符号右移相同，但是将负数无符号右移，结果就不同了，无符号右移是以 0 来填充空位。而不是像有符号右移那样以符号位的值来填充空位。无符号右移会把附属的二进制码当成正数的二进制码，而且，由于负数以其绝对值的二进制补码形式表示，因此会导致无符号右移后的结果非常大。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> old = <span class="number">-64</span>;</div><div class="line"><span class="keyword">var</span> newValue = old &gt;&gt;&gt; <span class="number">5</span>; <span class="comment">//134217726</span></div></pre></td></tr></table></figure>
<h2 id="3-布尔操作符"><a href="#3-布尔操作符" class="headerlink" title="3. 布尔操作符"></a>3. 布尔操作符</h2><h3 id="1-逻辑非"><a href="#1-逻辑非" class="headerlink" title="1. 逻辑非"></a>1. 逻辑非</h3><p>逻辑非操作符用 ! 表示，可以应用于 ECMAScript 中的任何值。逻辑非操作符首先会将它的操作数准换为一个布尔值，然后再对其求反。逻辑非遵循下面的规则。</p>
<ul>
<li>返回 true<ul>
<li>操作数是一个空字符串；</li>
<li>操作数是数值 0；</li>
<li>操作数是 null；</li>
<li>操作数是 NaN；</li>
<li>操作数是 undefined；</li>
</ul>
</li>
<li>返回 false<ul>
<li>操作数是一个对象；</li>
<li>操作数是一个非空字符串；</li>
<li>操作数是任意非零数值（包括 infinity）；</li>
</ul>
</li>
</ul>
<h3 id="2-逻辑与"><a href="#2-逻辑与" class="headerlink" title="2. 逻辑与"></a>2. 逻辑与</h3><p>逻辑与用 &amp;&amp; 表示，有两个操作数。两个操作数同为 true ，则结果返回 true。否则返回 false。</p>
<p>逻辑与操作在有一个操作数不是布尔值的情况下，则不一定返回布尔值。它遵循下列规则：</p>
<ul>
<li>第一个操作数是对象，则返回第二个操作数。</li>
<li>第二个操作数是对象，则只有在第一个操作数的求值结果为 true  的情况下才会返回该对象。</li>
<li>如果两个操作数都是对象， 则返回第二个操作数。</li>
<li>如果有一个操作数是 null ，则返回 null。</li>
<li>如果有一个操作数是 NaN，则返回 NaN。</li>
<li>如果有一个操作数是 undefined，则返回 undefined。</li>
</ul>
<p>逻辑与操作属于短路操作，即如果第一个操作数能够决定结果，那么就不会对第二个操作数求值。</p>
<h3 id="3-逻辑或"><a href="#3-逻辑或" class="headerlink" title="3. 逻辑或"></a>3. 逻辑或</h3><p>逻辑或操作符用 || 表示，有两个操作数。</p>
<p>逻辑或操作与逻辑与操作相似，如果有一个操作数不是布尔值，逻辑或也不一定返回布尔值。它遵循下列规则：</p>
<ul>
<li>如果第一个操作数是对象，则返回第一个对象。</li>
<li>如果第一个操作数的求值结果为 false ，则返回第二个操作数。</li>
<li>如果两个操作数都是对象，则返回第一个操作数。</li>
<li>如果两个操作数都是 null，返回 null。</li>
<li>如果两个操作数都是 NaN，返回 NaN。</li>
<li>如果两个操作数都是 undefined ，返回 undefined。</li>
</ul>
<p>我们可以利用逻辑或来避免为变量赋 null 或 undefined 值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> value = preferredObject || backup;</div><div class="line"><span class="comment">// 变量 value 将被赋予等号后面两个值的其中一个，变量 preferredObject 中包含优先赋给变量 value 的值，变量 backup 负责在 preferredObject 中不包含有效值的情况下提供后备值。</span></div></pre></td></tr></table></figure>
<h2 id="4-乘性操作符"><a href="#4-乘性操作符" class="headerlink" title="4. 乘性操作符"></a>4. 乘性操作符</h2><h3 id="1-乘法"><a href="#1-乘法" class="headerlink" title="1. 乘法"></a>1. 乘法</h3><p>乘法操作（*）遵循下列规则（仅列出特殊情况）：</p>
<ul>
<li>乘积超出 ECMAScript 数值的表示范围，则返回 Infinity 或 -Infinity。</li>
<li>如果有一个操作数是 NaN，则结果是 NaN。</li>
<li>如果是 Infinity 与 0 相乘，则返回 NaN。</li>
<li>如果是 Infinity 与非 0 数值相乘，则返回 Infinity 或 -Infinity。</li>
<li>如果是 Infinity 与 Infinity 相乘，返回 Infinity。</li>
<li>如果有一个操作数不是数值，则在后台调用 Number() 函数将其转换为数值，然后再应用上面的规则。</li>
</ul>
<h3 id="2-除法"><a href="#2-除法" class="headerlink" title="2. 除法"></a>2. 除法</h3><p>除法操作符用一个斜线符号（/）表示，规则不再列出注意 Infinity 的除法就好了。</p>
<h3 id="3-求模"><a href="#3-求模" class="headerlink" title="3. 求模"></a>3. 求模</h3><p>求模（余数）操作符用一个百分号（%）表示，如 <code>var result = 26 %  5</code>，结果是 1。</p>
<h2 id="5-加性操作符"><a href="#5-加性操作符" class="headerlink" title="5. 加性操作符"></a>5. 加性操作符</h2><h3 id="1-加法（-）"><a href="#1-加法（-）" class="headerlink" title="1. 加法（+）"></a>1. 加法（+）</h3><p>对于有一个操作符是字符串的情况，则有：1. 两个操作数都是字符串，则将第二个字符串和第一个字符串拼接起来；如果只有一个操作数是字符串，则将另一个操作数转换为字符串，然后将它们拼接起来。</p>
<p>如果有一个操作数是对象， 数值或布尔值。则调用它们的 toString 方法取得相应的字符串值，然后再应用上述规则。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = <span class="number">5</span> + <span class="number">5</span>; <span class="comment">//10</span></div><div class="line"><span class="keyword">var</span> result1 = <span class="number">5</span> + <span class="string">"5"</span>; <span class="comment">//"55"</span></div></pre></td></tr></table></figure>
<h3 id="2-减法（-）"><a href="#2-减法（-）" class="headerlink" title="2. 减法（-）"></a>2. 减法（-）</h3><p>如果有一个操作数是字符串，布尔值，null 或 undefined，则先在后台调用 Number() 函数将其转换为数值。然后再计算，如果转换的数值是 NaN，则减法的结果为 NaN。</p>
<h2 id="6-关系操作符"><a href="#6-关系操作符" class="headerlink" title="6. 关系操作符"></a>6. 关系操作符</h2><p>小于（&lt;），大于（&gt;），小于等于（&lt;=），大于等于（&gt;=）这几个关系操作符用于比较两个值，返回布尔值。</p>
<ul>
<li>如果两个操作数都是数值，则执行数值比较。</li>
<li>两个操作数都是字符串，则比较两个字符串对应的字符编码值。</li>
<li>如果一个操作数是数值，则将另一个操作数转换为数值，然后在执行数值比较。</li>
<li>如果一个操作数是对象， 则调用这个对象的 valueof() 方法，然后再比较。如果对象没有 valueof() 方法，则调用 toString() 方法，并用得到的结果根据前面的规则比较。</li>
<li>如果一个操作数是布尔值，则先将其转换为数值，然后再执行比较。</li>
</ul>
<h2 id="7-相等操作符"><a href="#7-相等操作符" class="headerlink" title="7. 相等操作符"></a>7. 相等操作符</h2><h3 id="1-相等和不相等（-和-）"><a href="#1-相等和不相等（-和-）" class="headerlink" title="1. 相等和不相等（== 和 !=）"></a>1. 相等和不相等（== 和 !=）</h3><p>这两个操作符都会先转换操作数，然后再比较他们的相等性。</p>
<p>这两个操作符在进行比较时需要遵循下列的规则：</p>
<ul>
<li>null 和 undefined 是相等的。（一个很奇怪的设定。）</li>
<li>要比较相等性之前，不能将 null 和 undefined 转换成其他任何值。</li>
<li>如果有一个操作数是 NaN，则相等操作符返回 false，而不相等操作符返回 true。注意：<strong>NaN 不等于 NaN</strong></li>
<li>如果两个操作符都是对象，则比较它们是不是同一个对象，如果都指向同一个对象，则相等操作符返回 true，否则，返回 false。</li>
</ul>
<h3 id="2-全等和不全等（-和-）"><a href="#2-全等和不全等（-和-）" class="headerlink" title="2. 全等和不全等（=== 和 !== ）"></a>2. 全等和不全等（=== 和 !== ）</h3><p>全等操作符只在两个操作数未经转换就相等的情况下返回 true。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result1 = (<span class="string">"55"</span> == <span class="number">55</span>); <span class="comment">//true</span></div><div class="line"><span class="keyword">var</span> result2 = (<span class="string">"55"</span> === <span class="number">55</span>); <span class="comment">//false</span></div></pre></td></tr></table></figure>
<p>注意：<strong>null !== undefined</strong></p>
<h2 id="8-条件操作符"><a href="#8-条件操作符" class="headerlink" title="8. 条件操作符"></a>8. 条件操作符</h2><p>直接上代码~</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = boolean_expression ? true_value:false_value;</div><div class="line"><span class="comment">//如果 boolean_expression 为 true，则给变量 result 赋予 true_value，否则给变量 result 赋予 false_value。</span></div><div class="line"><span class="keyword">var</span> max = (num1 &gt; num2) ? num1 : num2;</div><div class="line"><span class="comment">//返回 num1 和 num2 之间最大值。</span></div></pre></td></tr></table></figure>
<h2 id="9-赋值操作符"><a href="#9-赋值操作符" class="headerlink" title="9. 赋值操作符"></a>9. 赋值操作符</h2><p>简单的赋值操作符由等于号（=）表示，其作用就是把右侧的值赋给左侧的变量。如果在等于号之前添加乘性操作符等，就可以完成复合赋值操作。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">10</span>；</div><div class="line">num += <span class="number">10</span>; <span class="comment">//等于 num = num + 10</span></div></pre></td></tr></table></figure>
<h2 id="10-逗号操作符"><a href="#10-逗号操作符" class="headerlink" title="10. 逗号操作符"></a>10. 逗号操作符</h2><p>上代码~</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num1 =<span class="number">1</span>,num2 = <span class="number">2</span>;</div><div class="line"><span class="comment">//逗号操作符多用于声明多个表达式。</span></div><div class="line"><span class="keyword">var</span> num = (<span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">0</span>); <span class="comment">// num = 0;</span></div><div class="line"><span class="comment">//逗号操作符可以用来赋值，这时总会返回表达式中的最后一项。</span></div></pre></td></tr></table></figure>
<p>拓展阅读：</p>
<ol>
<li><a href="https://zhuanlan.zhihu.com/p/21650547" target="_blank" rel="external">通过一张简单的图，让你彻底搞懂JS的==运算</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comma_Operator" target="_blank" rel="external">逗号操作符</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS 高程学习 3：数据类型]]></title>
      <url>http://blog.jxdjayden.cn/2016/08/05/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A0/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A03_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>ECMAScript 中有五种简单数据类型（也称为基本数据类型）：Undefined，Null，Boolean，Number 和 string ，还有一种复杂数据类型：object 。 来简单了解一下每种数据类型。</p>
<h2 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h2><p>typeof 操作符用来检测给定变量的数据类型。typeof 对一个值可能返回下列的某个字符串。    </p>
<pre><code>- &quot;undefined&quot; : 这个值未定义
- &quot;boolean&quot; : 这个值是布尔值
- &quot;string&quot; : 这个值是字符串
- &quot;number&quot; : 这个值是数值
- &quot;object&quot; : 这个值是对象或者 null
- &quot;function&quot; : 这个值是函数
</code></pre><p><strong>typrof null 会返回 “object”</strong></p>
<h2 id="undefined-类型"><a href="#undefined-类型" class="headerlink" title="undefined 类型"></a>undefined 类型</h2><p>undefined 类型只有一个值，那就是 undefined 。在使用 var 声明变量但未对其初始化时，这个变量的值就是 undefined 。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> message;</div><div class="line">alert(message == <span class="literal">undefined</span>); <span class="comment">//true</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>不过，包含 undefined 值的变量和尚未定义的变量是不一样的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> message;</div><div class="line"></div><div class="line"><span class="comment">//下面这个变量并没有声明</span></div><div class="line"><span class="comment">//var age</span></div><div class="line"></div><div class="line">alert(message); <span class="comment">//undefined</span></div><div class="line">alert(age); <span class="comment">//错误</span></div></pre></td></tr></table></figure>
<p>对未初始化的变量执行 typeof 操作符会返回 undefined，而对未声明的变量执行 typeof 操作符同样也返回 undefined 值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> message;</div><div class="line"></div><div class="line"><span class="comment">//下面这个变量并没有声明</span></div><div class="line"><span class="comment">//var age</span></div><div class="line"></div><div class="line">alert(<span class="keyword">typeof</span> message); <span class="comment">//"undefined"</span></div><div class="line">alert(<span class="keyword">typeof</span> age); <span class="comment">//"undefined"</span></div></pre></td></tr></table></figure>
<h2 id="Null-类型"><a href="#Null-类型" class="headerlink" title="Null 类型"></a>Null 类型</h2><p>null 类型是第二个只有一个值的数据类型，这个特殊值是 null 。从逻辑角度来看，null 表示一个空对象指针，这也是使用 typeof 操作符检测 null 值会返回 “object” 的原因。<br>如果定义的对象准备用来保存对象，那么最好将该变量初始化为 null 。<br>然而 ECMA-262 规定对 undefined 和 null 的相等性测试要返回 true 。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">//true</span></div></pre></td></tr></table></figure>
<h2 id="boolean-类型"><a href="#boolean-类型" class="headerlink" title="boolean 类型"></a>boolean 类型</h2><p>boolean 类型只有两个字面值：true 和 false。所有类型的值都可以调用转型函数 boolean() 转换成对应的 boolean 值的变量。</p>
<h2 id="Number-类型"><a href="#Number-类型" class="headerlink" title="Number 类型"></a>Number 类型</h2><h3 id="浮点数值"><a href="#浮点数值" class="headerlink" title="浮点数值"></a>浮点数值</h3><p>浮点数值：该数值必须包含一个小数点，并且小数点后面至少有一位数字。</p>
<p>ECMAScript 在合适的时候会把浮点数转换成整数来存储。对于极大或者极小的数值可以用科学计数法来表示。浮点数的最高精度是 17 位，但是在进行算术计算时其精确度远远不如整数。如 0.1 + 0.2 的结果不是 0.3，而是0.30000000000000004，这个舍入误差会导致无法测试特定的浮点数值。</p>
<h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><p>NaN 即非数值，这个数值用来表示一个本来要返回数值的操作数未返回数值的情况。在 ECMAScript 中，任何数值除以非数值会返回 NaN ，因此不影响其他代码的执行。<br>NaN 有两个特点：任何涉及 NaN 的操作都会返回 NaN ，NaN 与任何数值都不相等，包括 NaN 本身。可以使用 isNaN() 函数来判断参数是否“不是数值”。</p>
<h3 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h3><p>可以使用 Number()、parseInt()、parseFloat()这三个函数把非数值转换成数值。Number()可用于任何数据类型，而另外两个专门用于把字符串转换成数值。<br>Number() 的转换规则如下：</p>
<ul>
<li>如果是 boolean 值，true 和 false 将分别被转换成 1 和 0。</li>
<li>如果是数字，只是简单的传入和返回。</li>
<li>如果是 null 值，返回 0。</li>
<li>如果是 undefined ，返回 NaN。</li>
<li>如果是字符串，遵循下列的规则。<ul>
<li>字符串中只包含数字（包括带正负号的情况），则将其转换成十进制，注意 “011” 会转换成 11。</li>
<li>如果字符串中包含有效的浮点格式，如 “1.1”,则将其转换为对应的浮点数值，注意也会忽略前导零。</li>
<li>如果字符串中包含有效的十六进制格式，则将其转换成相同大小的十进制整数。</li>
<li>如果字符串是空的，则转换成 0。</li>
<li>如果字符串包含除上述格式之外的字符，则将其转换成 NaN。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num1 = <span class="built_in">Number</span>(<span class="string">"hello"</span>); <span class="comment">//NaN</span></div><div class="line"><span class="keyword">var</span> num2 = <span class="built_in">Number</span>(<span class="string">""</span>); <span class="comment">//0</span></div><div class="line"><span class="keyword">var</span> num3 = <span class="built_in">Number</span>(<span class="string">"0000011"</span>); <span class="comment">//11</span></div><div class="line"><span class="keyword">var</span> num4 = <span class="built_in">Number</span>(<span class="literal">true</span>); <span class="comment">//1</span></div></pre></td></tr></table></figure>
<p>在处理整数时更常用 praseInt() 函数，parseInt() 函数在转换字符串时，更多的是看其是否符合数值模式。他会忽略字符串前面的空格。直至找到第一个非空格字符，如果第一个字符不是数字字符或者符号，praseInt() 会返回 NaN。下面是一些例子</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num1 = praseInt(<span class="string">"12345abs"</span>); <span class="comment">//12345</span></div><div class="line"><span class="keyword">var</span> num1 = praseInt(<span class="string">""</span>); <span class="comment">//NaN</span></div><div class="line"><span class="keyword">var</span> num1 = praseInt(<span class="string">"0xA"</span>); <span class="comment">//10 十六进制</span></div></pre></td></tr></table></figure>
<p>为了消除不必要的问题，可以为 praseInt() 函数提供第二个参数：转换时使用的基数（即多少进制）。</p>
<p>praseFloat() 和 praseInt() 类似，也是从第一个字符开始解析每个字符，但是字符串中的第一个小数点是有效的，另一个要点是 praseFloat() 始终会忽略前导零，它只用于解析十进制数。</p>
<h2 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h2><p>string 类型用于表示由零个或者多个 16 位 Unicode 字符组成的字符序列。</p>
<ol>
<li><p>字符字面量</p>
<p> string 数据类型包含一些特殊的字符字面量，也叫转义序列，用于表示非打印字符，或者具有其他用途的字符。可通过查阅了解，常用的有 “\n”: 换行；”\r”: 回车；”\’”: 单引号；”\””: 双引号等。</p>
</li>
<li><p>字符串的特点</p>
<p> ECMAScript 中的字符串是不可变的， 也就是说字符串一旦创建，它们的值就不能改变，要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量。</p>
</li>
<li><p>转换为字符串</p>
<ol>
<li>使用 toString() 方法。但是 null 和 undefined 没有 toString() 方法。</li>
<li>使用转型函数 String()。如果 null 会返回 “null”，如果 undefined 返回 “undefined”</li>
</ol>
</li>
</ol>
<h2 id="object-类型"><a href="#object-类型" class="headerlink" title="object 类型"></a>object 类型</h2><p>ECMAScript 中的对象其实就是一组数据与功能的集合。对象可以通过执行 new 操作符后要跟要创建的对象类型的名称来创建，而创建 object 类型的实例并为其添加属性和方法，就可以自定义对象。如：<code>var o=new Object()</code>。</p>
<p>在ECMASript 中，Object 类型是所有它的实例的基础，Object 类型所具有的任何属性和方法也同样存在于更具体的对象中。</p>
<p>Object 的每个实例都具有下列属性和方法：</p>
<ul>
<li>construtor：保存着用于创建当前对象的函数。</li>
<li>hasOwnProperty：用于检查给定的属性在当前对象实例中（而不是对象的原型中）是否存在。作为参数的属性名必须以字符串形式指定。</li>
<li>isPrototypeof：用于检查传入的对象是否是传入对象的原型。</li>
<li>properyIsEnumerable：用于检查给定的属性是否可以使用 for-in 语句来枚举。</li>
<li>toLocaleString：返回对象的字符串表示，该字符串与执行环境的地区对应。</li>
<li>toString：返回对象的字符串表示。</li>
<li>valueOf：返回对象的字符串、数值或布尔值表示。通常与 toString() 方法返回的值相同。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS 高程学习 2：基本概念]]></title>
      <url>http://blog.jxdjayden.cn/2016/08/04/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A0/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A02_%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<h1 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h1><ol>
<li><p>区分大小写—— ECMAScript中的一切都区分大小写。</p>
</li>
<li><p>标识符：变量、函数、属性的名字，或者函数的参数。标识符的第一个字符必须是一个字母，下划线（_）或者一个美元符号（$）;其他字符可以是字母、下划线、美元符号或数字。注意：<strong>不能把关键字、保留字、true、false 和 null 用作标识符。</strong></p>
<blockquote>
<p>ECMAScript 标识符一般采用驼峰大小写格式：firstSecond。第一个字母小写，剩下的每个单词的首字母大写。</p>
<a id="more"></a></blockquote>
</li>
<li><p>注释。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//这是一个单行注释</div><div class="line"></div><div class="line">/*</div><div class="line"> *   这是一个多行注释</div><div class="line"> *   中间两行的星号不是必须的，仅为了提高注释的可读性。</div><div class="line"> */</div></pre></td></tr></table></figure>
</li>
<li><p>严格模式<br>严格模式下，ECMAScript3 的一些不确定的行为将会得到处理，而且对某些不安全的操作也会抛出错误。启用严格模式可以在顶部添加代码：<code>&#39;use strict&#39;;</code>。同样可以在函数内部的上方注明，指定函数在严格模式下执行。</p>
</li>
<li><p>语句<br>ECMAScript 中的语句以一个分号结尾，如果省略分号将有解析器确定语句的结尾。建议不要省略分号，以免发生不必要的错误。同样的，用 {} 可以将多条语句组合到一个代码块中。在控制语句( if )中使用代码块可以让编码意图更加清晰。</p>
</li>
</ol>
<h1 id="2-关键字和保留字"><a href="#2-关键字和保留字" class="headerlink" title="2. 关键字和保留字"></a>2. 关键字和保留字</h1><p>ECMA-262 描述了一组具有特定用途的关键字，这些关键字不能用作标识符。详细可<a href="http://www.runoob.com/js/js-reserved.html" target="_blank" rel="external">点击</a>查看。</p>
<h1 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h1><p>ECMAScript 的变量是松散型的，即可以用来保存任何类型的数据，也就是说，每个变量仅仅是一个用来保存值的占位符而已。定义变量需要使用 var 操作符。例：<code>var massage;</code> 。ECMAScript 支持直接初始化变量：<code>var massage =&#39;hi&#39;;</code> ,此时并不会把这个变量标记为字符串类型，所以可以在修改变量值的时候修改值的类型。但是不建议修改变量所保存值的类型。<br>需要注意的是：如果用 var 操作符定义变量，将成为定义该变量的作用域中的局部变量，也就是说，如果在函数中使用 var 定义一个变量，那么这个变量在函数退出后就会被销毁。例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> massage = <span class="number">2</span>; <span class="comment">//局部变量</span></div><div class="line">&#125;</div><div class="line">test();</div><div class="line">alert(massage); <span class="comment">//错误！</span></div></pre></td></tr></table></figure></p>
<p>如果忽略 var 将定义一个全局变量，但是<strong>不建议这样做</strong>，因为在局部作用域中定义的全局变量很难维护。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Express 学习记录：Express 的方法]]></title>
      <url>http://blog.jxdjayden.cn/2016/08/03/Express/Express%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="1-all-方法和-HTTP-动词方法"><a href="#1-all-方法和-HTTP-动词方法" class="headerlink" title="1. all 方法和 HTTP 动词方法"></a>1. all 方法和 HTTP 动词方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.all(<span class="string">'*'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">    consloe.log(<span class="string">'Server start'</span>);</div><div class="line">    next();</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">app.get(<span class="string">'/hello'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">    res.end(<span class="string">'hello world'</span>);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>app 的 all 方法表示所有请求都必须通过该中间件，参数中的“*”表示对所有路径有效。app 的 get方法则是只有 get 的 HTTP 请求通过该中间件，它的第一个参数是请求的路径。<br>除了 get 方法以外，Express 还提供 post、put、delete 方法，即HTTP 方法都是 Express 的方法。<br>Express 还允许模式匹配：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/hello/:name'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">    res.end(<span class="string">'hello'</span>+req.params.name+<span class="string">'!'</span>);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<p>如果输入网址为：’/hello/jayden’，jayden 将会被作为 req.params.name 属性的值，浏览器输出 hello jayden！。<br><strong>需要注意的是，捕获后需要对网址进行检查，过滤不安全字符!</strong><br>如果在模式参数后面加上问号，表示该参数可选。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">app.get(&apos;/hello/:name?&apos;function(req,res)&#123;</div><div class="line">    if(req.params.name)&#123;</div><div class="line">        res.send(&apos;your name is&apos;+req.params.name);</div><div class="line">    &#125; else&#123;</div><div class="line">        res.send(&apos;hello&apos;);</div><div class="line">    &#125;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p>
<p>当然，模式匹配也支持正则表达式。</p>
<h1 id="2-set-方法"><a href="#2-set-方法" class="headerlink" title="2. set 方法"></a>2. set 方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.set(&apos;name&apos;,&apos;jayden&apos;);</div></pre></td></tr></table></figure>
<p>set 方法用于指定变量的值。上面的代码为系统变量 “name” 指定值为 “jayden”。</p>
<h1 id="3-response-对象"><a href="#3-response-对象" class="headerlink" title="3. response 对象"></a>3. response 对象</h1><h2 id="1-response-redirect-方法允许网址的重定向。"><a href="#1-response-redirect-方法允许网址的重定向。" class="headerlink" title="1. response.redirect 方法允许网址的重定向。"></a>1. response.redirect 方法允许网址的重定向。</h2><p><strong>未完待续</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Express 学习记录：运行原理]]></title>
      <url>http://blog.jxdjayden.cn/2016/08/01/Express/Express%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="1-底层：http-模块"><a href="#1-底层：http-模块" class="headerlink" title="1. 底层：http 模块"></a>1. 底层：http 模块</h1><p>http 模块生成服务器原始代码如下。createServer 方法表示生成一个 HTTP 服务器实例。该方法接受一个回调函数，该回调函数的参数，分别为代表 HTTP 请求和HTTP 回应的 request 对象和 response 对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> app=http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">    response.send(<span class="string">'hello'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">8000</span>,<span class="string">'localhost'</span>);</div></pre></td></tr></table></figure></p>
<p>Eepress 框架建立在 node.js 内置的 http 模块上。它的核心是对 http 模块的再包装。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'Hello world!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>比较两端代码可以发现它们非常接近，两者的回调函数都是相同的。Express 框架等于在 http 模块之上，加了一个中间层。</p>
<h1 id="2-中间件"><a href="#2-中间件" class="headerlink" title="2. 中间件"></a>2. 中间件</h1><p>中间件(middleware)简单地说就是处理 HTTP 请求的函数，它的特点是一个中间件处理完再传递给下一个中间件。<br>每个中间件可以从 app 实例接收三个参数：request、response、next（下一个中间件）。<br>一个最基础的中间件的代码如下。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">middleware</span>(<span class="params">req,res,next</span>)</span>&#123;</div><div class="line">    next();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="3-use-方法"><a href="#3-use-方法" class="headerlink" title="3. use 方法"></a>3. use 方法</h1><p>use 是 express 注册中间件的方法，它返回一个函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">request,response,next</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(request.url);</div><div class="line">    next();</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">    response.end(<span class="string">'hello world'</span>);</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">http.createServer(app).listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure></p>
<p>这里使用 app.use 方法注册了两个中间件。在收到 HTTP 请求后会先调用第一个中间件，输出请求的地址，因为第一个中间件中调用了 next() 方法，所以接下来会执行第二个中间件，输出 HTTP 回应。由于第二个中间件没有调用 next 方法，所以 request 对象就不再向后传递了。<br>use 方法内部可以对访问路径进行判断，据此就能实现简单的路由，根据不同的请求网址，返回不同的网页内容。除了在回调函数内部判断请求的网址，use 方法也允许将请求网址写在第一个参数。这代表，只有请求路径匹配这个参数，后面的中间件才会生效。无疑，这样写更加清晰和方便。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express=<span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> app=express();</div><div class="line"></div><div class="line">app.use(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response,next</span>)</span>&#123;</div><div class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">    response.send(<span class="string">'this is start'</span>);</div><div class="line">    &#125;);</div><div class="line">app.use(<span class="string">'/hello'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response,next</span>)</span>&#123;</div><div class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">    response.send(<span class="string">'hello world'</span>);</div><div class="line">    &#125;);</div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">    response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">    response.send(<span class="string">'404 Not found'</span>);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">http.createServer(app).listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>参考：<a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc5" target="_blank" rel="external">《JavaScript 标准参考教程（alpha）》</a>，by 阮一峰</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS 高程学习 1：JavaScript 简介]]></title>
      <url>http://blog.jxdjayden.cn/2016/07/31/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A0/JS%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A01_JavaScript%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<h1 id="1-JavaScript-简史"><a href="#1-JavaScript-简史" class="headerlink" title="1. JavaScript 简史"></a>1. JavaScript 简史</h1><p>JavaScript 诞生于 1995 年，当时它的主要目的是处理以前由服务器端语言（如 Perl）负责的一些输入验证操作。1997 年，以 JavaScript1.1 为蓝本的建议被提交给了 ECMA，经过数月的努力，完成了 ECMA-262 的新脚本语言的标准。自此以后，浏览器开发商就开始致力于将 ECMAScript 作为各自 JavaScript 实现的基础。<br>如今，JavaScript 已经成为一门功能全面的编程语言，能够处理复杂的计算和交互，拥有了闭包，匿名函数等特性。</p>
<h1 id="2-JavaScript-的实现"><a href="#2-JavaScript-的实现" class="headerlink" title="2. JavaScript 的实现"></a>2. JavaScript 的实现</h1><p>完整的 JavaScript 由三个部分组成：核心（ECMAScript），文档对象模型（DOM），浏览器对象模型（BOM）。</p>
<a id="more"></a>
<h2 id="1-ECMAScript"><a href="#1-ECMAScript" class="headerlink" title="1. ECMAScript"></a>1. ECMAScript</h2><p>由 ECMA-262 定义的 ECMAScript 与 Web 浏览器没有依赖关系，我们常见的 Web 浏览器只是 ECMAScript 的宿主环境之一。ECMA-262 标准规定了这门语言的组成部分：1. 语法；2.类型；3.语句；4.关键字；5.保留字；6.操作符，7.对象。<br>目前 ECMAScript 最新标准是：ECMA-262 Edition 6  。详细的版本更替记录以及浏览器对 ECMAScript 的支持情况可以<a href="https://zh.wikipedia.org/wiki/ECMAScript" target="_blank" rel="external">点击</a>查看。（这里不写出来是因为书里面的信息已经过期了，本人阅读的是第 3 版。wiki 已经很好地记录了 ECMAScript 历史信息。）</p>
<h2 id="2-文档对象模型（DOM）"><a href="#2-文档对象模型（DOM）" class="headerlink" title="2. 文档对象模型（DOM）"></a>2. 文档对象模型（DOM）</h2><p>文档对象模型（DOM，Document Object Model）是针对 XML 但经过扩展用于 HTML 的应用程序编程接口（API）。<br>示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这个页面的分层节点为：<br>html<br>|–head<br>|  +title<br>|   +Sample Page<br>|–body<br>|  +p<br>|   +Hello world!<br>DOM 2级引入了新的模块，同时给除了总多新类型和新接口的定义，DOM3 级进一步扩展了 DOM，引入了以统一方式加载和保存文档的方法，同时对 DOM 核心进行了扩展，开始支持 XML1.0 规范。DOM 接口可以<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model" target="_blank" rel="external">点击</a>查看。</p>
<h2 id="3-浏览器对象模型（BOM）"><a href="#3-浏览器对象模型（BOM）" class="headerlink" title="3. 浏览器对象模型（BOM）"></a>3. 浏览器对象模型（BOM）</h2><p>BOM 从根本上来说只处理浏览器窗口和框架。但是习惯上也把所有针对浏览器的 JavaScript 扩展算作 BOM 的一部分，包括弹出新浏览器窗口的功能，移动缩放和关闭浏览器的功能，对 cookie 的支持等。</p>
<h1 id="3-JavaScript-版本"><a href="#3-JavaScript-版本" class="headerlink" title="3. JavaScript 版本"></a>3. JavaScript 版本</h1><p>可<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/New_in_JavaScript" target="_blank" rel="external">点击</a>查看。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Express 学习记录：开始一个简单的开始项目]]></title>
      <url>http://blog.jxdjayden.cn/2016/07/31/Express/Express%E4%B8%8A%E6%89%8B%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%BC%80%E5%A7%8B%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p>由于公司的项目要求，最近在开始学习 node.js 以及跟着阮一峰老师写的 nodejs 教程学习 Express。于是在自己的 blog 记录一下学习过程。Express 是目前最流行的基于 Node.js 开发框架，可以快速地搭建一个网站。</p>
<h1 id="1-新建目录"><a href="#1-新建目录" class="headerlink" title="1. 新建目录"></a>1. 新建目录</h1><p>新建一个项目目录 <code>$ mkdir myapp</code> 在该目录下新建一个 package.json 文件，该文件定义了项目的名字，描述，版本，同时指定需要的 Express 版本。</p>
<pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"myapp"</span>,</div><div class="line">    <span class="string">"description"</span>: <span class="string">"Express test app"</span>,</div><div class="line">    <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</div><div class="line">    <span class="string">"private"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"express"</span>: <span class="string">"4.x"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><a id="more"></a>
<h1 id="2-安装-Express"><a href="#2-安装-Express" class="headerlink" title="2. 安装 Express"></a>2. 安装 Express</h1><p>然后使用命令 <code>npm install</code> 进行安装。安装成功会显示：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">├── range-parser@1.2.0</div><div class="line">├── content-type@1.0.2</div><div class="line">├── cookie@0.3.1</div><div class="line">├── encodeurl@1.0.1</div><div class="line">├── utils-merge@1.0.0</div><div class="line">├── merge-descriptors@1.0.1</div><div class="line">├── methods@1.1.2</div><div class="line">├── serve-static@1.11.1</div><div class="line">├── fresh@0.3.0</div><div class="line">├── path-to-regexp@0.1.7</div><div class="line">├── depd@1.1.0</div><div class="line">├── qs@6.2.0</div><div class="line">├── on-finished@2.3.0 (ee-first@1.1.1)</div><div class="line">├── finalhandler@0.5.0 (unpipe@1.0.0, statuses@1.3.0)</div><div class="line">├── debug@2.2.0 (ms@0.7.1)</div><div class="line">├── proxy-addr@1.1.2 (forwarded@0.1.0, ipaddr.js@1.1.1)</div><div class="line">├── accepts@1.3.3 (negotiator@0.6.1, mime-types@2.1.11)</div><div class="line">├── type-is@1.6.13 (media-typer@0.3.0, mime-types@2.1.11)</div><div class="line">└── send@0.14.1 (destroy@1.0.4, statuses@1.3.0, ms@0.7.1, mime@1.3.4, http-errors@1.5.0)</div></pre></td></tr></table></figure>
</code></pre><h1 id="3-初步尝试"><a href="#3-初步尝试" class="headerlink" title="3. 初步尝试"></a>3. 初步尝试</h1><p>安装成功后，在项目根目录下新建一个启动文件，可命名为 index.js，并输入：</p>
<pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app=express();</div><div class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">    res.send(<span class="string">"Hello,world!"</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Sever has started'</span>);</div><div class="line">&#125;);</div><div class="line">app.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure>
</code></pre><p>然后在命令行使用命令 <code>node index.js</code> 运行脚本，就可以通过 <a href="http://localhost:8000" target="_blank" rel="external">http://localhost:8000</a>来访问网站。上面代码会在本机的 8000 端口启动一个网站，网页显示 Hello World。<br><strong>req (请求) 和 res (响应) 与 Node 提供的对象完全一致，因此，你可以调用 req.pipe()、req.on(‘data’, callback) 以及任何 Node 提供的方法。</strong><br><strong>app.get</strong> 方法用于指定不同的访问路径所对应的回调函数，这叫做“路由”（routing）。路由是指如何定义应用的端点（URIs）以及如何响应客户端的请求。</p>
<h1 id="4-合并-routes"><a href="#4-合并-routes" class="headerlink" title="4. 合并 routes"></a>4. 合并 routes</h1><p>如果有多个路由，那么可以新建一个 router.js 文件，把所有 routes 都放到一起。</p>
<pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    \\router.js</div><div class="line">    <span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</div><div class="line">        app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">            res.send(<span class="string">'Hello world'</span>);</div><div class="line">        &#125;);</div><div class="line">        app.get(<span class="string">'/start'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">            res.send(<span class="string">'start'</span>);</div><div class="line">        &#125;);</div><div class="line">        app.get(<span class="string">'/upload'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">            res.send(<span class="string">'upload'</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="string">``</span><span class="string">`    </span></div><div class="line">同时修改 index.js </div><div class="line"></div><div class="line">    `<span class="string">``</span>JavaScript</div><div class="line">    \\index.js</div><div class="line">    <span class="keyword">var</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line">    <span class="keyword">var</span> app=express();</div><div class="line">    <span class="keyword">var</span> routes=<span class="built_in">require</span>(<span class="string">'./router.js'</span>)(app);</div><div class="line">    app.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure>
</code></pre><p>这时，如果在浏览器访问 <a href="http://localhost:8000/start" target="_blank" rel="external">http://localhost:8000/start</a> ，网页会显示 start。访问 <a href="http://localhost:8000/start" target="_blank" rel="external">http://localhost:8000/upload</a> 会显示 upload。<br>这样我们就简单的构建了一个项目网站。并且可以在本地通过 http:/localhost:8000 来访问，同时可以对不同的 URL 进行响应，显示不同的内容。 </p>
<blockquote>
<p>参考：<a href="http://javascript.ruanyifeng.com/nodejs/express.html#toc5" target="_blank" rel="external">《JavaScript 标准参考教程（alpha）》</a>，by 阮一峰</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git 学习：标签管理及自定义]]></title>
      <url>http://blog.jxdjayden.cn/2016/07/31/git/git%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%A0%87%E7%AD%BE%E7%AE%A1%E7%90%86%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89/</url>
      <content type="html"><![CDATA[<h1 id="1-标签管理"><a href="#1-标签管理" class="headerlink" title="1. 标签管理"></a>1. 标签管理</h1><p>发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。</p>
<h2 id="1-创建标签"><a href="#1-创建标签" class="headerlink" title="1. 创建标签"></a>1. 创建标签</h2><ul>
<li><p>切换到需要打标签的分支上，然后输入命令 <code>git tag &lt;name&gt;</code> 可以打一个新标签。</p>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div><div class="line">Switched to branch <span class="string">'master'</span></div><div class="line">Your branch is ahead of <span class="string">'origin/master'</span> by 2 commits.</div><div class="line">(use <span class="string">"git push"</span> to publish your <span class="built_in">local</span> commits)</div></pre></td></tr></table></figure>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag v1.0</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li>使用命令 <code>git tag</code> 查看所有标签。</li>
<li><p>默认标签是打在最新提交的 commit 上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？方法是找到历史提交的 commit id，然后打上就可以了。</p>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> --pretty=oneline --abbrev-commit</div><div class="line">fb06fb2 merge with no-ff</div><div class="line">0c2bd74 merge <span class="built_in">test</span></div><div class="line">7<span class="built_in">cd</span>3de6 remove test.txt</div><div class="line">431726c add test.txt</div><div class="line">16c3889 change</div><div class="line">5860a7e change</div><div class="line">dddb972 append GPL</div><div class="line">b7b6289 change</div><div class="line">7c700be wrote a readme file</div></pre></td></tr></table></figure>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 给 16c3889 打标签  --&gt;</div><div class="line">$ git tag v0.9 16c3889</div><div class="line">&lt;!-- 可以用 git show &lt;tagname&gt; 查看标签信息 --&gt;</div><div class="line">$ git show v0.9</div><div class="line">commit 16c3889893bc972eb4ca47848cbd18faade022d5</div><div class="line">Author: jayden-J &lt;jxdlinhere@outlook.com&gt;</div><div class="line">Date:   Thu May 12 00:19:54 2016 +0800</div><div class="line">    change</div><div class="line">diff --git a/readme.md b/readme.md</div><div class="line">index d7f679f..329ec83 100644</div><div class="line">--- a/readme.md</div><div class="line">+++ b/readme.md</div><div class="line">@@ -1,3 +1,2 @@</div><div class="line"><span class="comment"># Git is a distributed version control system.</span></div><div class="line"><span class="comment"># Git is free software distributed under the GPL.</span></div><div class="line">-My stupid boss still prefers SVN.</div><div class="line">\ No newline at end of file</div></pre></td></tr></table></figure>
</li>
<li><p>可以创建带有说明的标签，用 -a 指定标签名，-m 指定说明文字。用命令 <code>git show &lt;tagname&gt;</code> 可以看到说明文字。</p>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ git tag <span class="_">-a</span> v0.1 -m <span class="string">"version 0.1"</span> 7<span class="built_in">cd</span>3de6</div><div class="line">&lt;!-- 查看标签信息 --&gt;</div><div class="line">$ git show v0.1</div><div class="line">tag v0.1</div><div class="line">Tagger: jayden-J &lt;jxdlinhere@outlook.com&gt;</div><div class="line">Date:   Mon May 16 12:19:33 2016 +0800</div><div class="line">version 0.1</div><div class="line">commit 7<span class="built_in">cd</span>3de65d8e5f4efb7c5f1630f330bb651aac600</div><div class="line">Author: jayden-J &lt;jxdlinhere@outlook.com&gt;</div><div class="line">Date:   Thu May 12 12:32:59 2016 +0800</div><div class="line">remove test.txt</div><div class="line">diff --git a/test.txt b/test.txt</div><div class="line">deleted file mode 100644</div><div class="line">index ce79696..0000000</div><div class="line">--- a/test.txt</div><div class="line">+++ /dev/null</div><div class="line">@@ -1 +0,0 @@</div><div class="line">-01010</div><div class="line">\ No newline at end of file</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2-管理标签"><a href="#2-管理标签" class="headerlink" title="2. 管理标签"></a>2. 管理标签</h2><ul>
<li>命令 <code>git push origin &lt;tagname&gt;</code> 可以推送一个本地标签。</li>
<li>命令 <code>git push origin --tags</code> 可以推送全部未推送过的本地标签。</li>
<li>命令 <code>git tag -d &lt;tagname&gt;</code> 可以删除一个本地标签。</li>
<li>命令 <code>git push origin :refs/tags/&lt;tagname&gt;</code> 可以删除一个远程标签。</li>
</ul>
<h1 id="2-自定义"><a href="#2-自定义" class="headerlink" title="2. 自定义"></a>2. 自定义</h1><h2 id="1-改变颜色"><a href="#1-改变颜色" class="headerlink" title="1. 改变颜色"></a>1. 改变颜色</h2><p>使用命令 <code>git config --global color.ui true</code> 让 Git 显示颜色，会让命令输出看起来更醒目。</p>
<h2 id="2-忽略文件"><a href="#2-忽略文件" class="headerlink" title="2. 忽略文件"></a>2. 忽略文件</h2><p>想要忽略特殊文件，可以在 Git 工作区的根目录下创建一个特殊的 .gitignore 文件，然后把要忽略的文件名填进去，Git 就会自动忽略这些文件。需要注意的是 .gitignore 文件本身要放到版本库里，并且可以对 .gitignore 做版本管理。</p>
<blockquote>
<p>不需要从头写 .gitignore 文件，GitHub 已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：<a href="https://github.com/github/gitignore" target="_blank" rel="external">https://github.com/github/gitignore</a></p>
</blockquote>
<p><em>检验.gitignore的标准是git status命令是不是说working directory clean。</em></p>
<h2 id="3-忽略文件的原则"><a href="#3-忽略文件的原则" class="headerlink" title="3. 忽略文件的原则"></a>3. 忽略文件的原则</h2><ul>
<li>忽略操作系统自动生成的文件，比如缩略图等；</li>
<li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如 Java 编译产生的 .class 文件；</li>
<li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li>
</ul>
<p>git 的学习记录大概就是这些了。有更多的在以后遇到再来补充。</p>
<blockquote>
<p>参考：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">《Git 教程》</a>，by 廖雪峰</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git 学习：远程仓库使用]]></title>
      <url>http://blog.jxdjayden.cn/2016/07/29/git/git%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="1-远程仓库建立（以-github-为例）"><a href="#1-远程仓库建立（以-github-为例）" class="headerlink" title="1. 远程仓库建立（以 github 为例）"></a>1. 远程仓库建立（以 github 为例）</h1><ol>
<li>创建 SSH Key</li>
</ol>
<ul>
<li>打开 git Bash（linux打开shell），使用 <code>$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code>创建 SSH Key 你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key 的秘钥对，id_rsa 是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人。</li>
</ul>
<a id="more"></a>
<ol>
<li>登录 Github ，打开 “Account settings”，“SSH Keys” 页面：然后，点 “Add SSH Key”，填上任意 Title，在 Key 文本框里粘贴 id_rsa.pub 文件的内容。</li>
<li>创建 Github 仓库</li>
</ol>
<ul>
<li>登陆 GitHub，然后，在右上角找到 “Create a new repo” 按钮，创建一个新的仓库在 Repository name 填入 learngit，其他保持默认设置，点击 “Create repository” 按钮，就成功地创建了一个新的 Git 仓库。</li>
</ul>
<ol>
<li>与本地的仓库连接</li>
</ol>
<ul>
<li>在本地的仓库中运行 <code>$ git remote add origin git@github.com:yourgithubname/learngit.git</code> 命令；添加后，远程库的名字就是 origin，这是 Git 默认的叫法，也可以改成别的，但是 origin 这个名字一看就知道是远程库。</li>
</ul>
<ol>
<li><p>把本地库的内容推送到远程库上：</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ git push -u origin master</div><div class="line">The authenticity of host <span class="string">'github.com (192.30.252.128)'</span> can<span class="string">'t be established.</span></div><div class="line">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</div><div class="line">Are you sure you want to continue connecting (yes/no)? yes</div><div class="line">Warning: Permanently added 'github.com,192.30.252.128<span class="string">' (RSA) to the list of known hosts.</span></div><div class="line">Counting objects: 19, done.</div><div class="line">Delta compression using up to 4 threads.</div><div class="line">Compressing objects: 100% (13/13), done.</div><div class="line">Writing objects: 100% (19/19), 1.55 KiB | 0 bytes/s, done.</div><div class="line">Total 19 (delta 4), reused 0 (delta 0)</div><div class="line">To git@github.com:jayden-J/learngit.git</div><div class="line"></div><div class="line"> *[new branch]      master -&gt; master</div><div class="line">Branch master set up to track remote branch master from origin.</div></pre></td></tr></table></figure>
</li>
<li><p>从现在起，只要本地作了提交，就可以通过命令：<code>git push origin master</code>把本地master分支的最新修改推送至 GitHub.<br>当你第一次使用 Git 的 clone 或者 push 命令连接 GitHub 时，会得到一个警告：</p>
<blockquote>
<p>The authenticity of host ‘github.com (xx.xx.xx.xx)’ can’t be established.<br><br>RSA key fingerprint is xx.xx.xx.xx.xx.<br><br>Are you sure you want to continue connecting (yes/no)?</p>
</blockquote>
</li>
</ol>
<p>这是因为 Git 使用 SSH 连接，而 SSH 连接在第一次验证 GitHub 服务器的 Key 时，需要你确认 GitHub 的 Key 的指纹信息是否真的来自 GitHub 的服务器，输入 yes 回车即可。</p>
<h1 id="2-从远程库克隆"><a href="#2-从远程库克隆" class="headerlink" title="2. 从远程库克隆"></a>2. 从远程库克隆</h1><p>假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。</p>
<ol>
<li>登陆 Github ,创建一个新的仓库 gitskills 。</li>
<li>在本地使用命令 <code>git clone</code> 克隆一个本地库。<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git@github.com:jayden-J/gitskills.git</div><div class="line">Cloning into <span class="string">'gitskills'</span>...</div><div class="line">Warning: Permanently added the RSA host key <span class="keyword">for</span> IP address <span class="string">'192.30.252.129'</span> to the list of known hosts.</div><div class="line">remote: Counting objects: 3, done.</div><div class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</div><div class="line">Receiving objects: 100% (3/3), done.</div><div class="line">Checking connectivity... done.</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="3-分支管理"><a href="#3-分支管理" class="headerlink" title="3. 分支管理"></a>3. 分支管理</h1><ol>
<li><p>创建分支,使用 <code>git checkout -b name</code>。</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b dev</div><div class="line">Switched to a new branch <span class="string">'dev'</span></div></pre></td></tr></table></figure>
</li>
<li><p>查看分支，使用 <code>git branch</code>。git branch 命令会列出所有分支，当前分支前面会标一个*号。 </p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git branch</div><div class="line">*dev</div><div class="line">master</div></pre></td></tr></table></figure>
</li>
<li><p>合并分支，<code>git merge</code> 命令用于合并指定分支到当前分支。</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git merge dev</div><div class="line">Updating d6f1ed3..177508b</div><div class="line">Fast-forward</div><div class="line">README.md | 3 ++-</div><div class="line">1 file changed, 2 insertions(+), 1 deletion(-)</div></pre></td></tr></table></figure>
</li>
</ol>
<p><em>注意到上面的 Fast-forward 信息，Git 告诉我们，这次合并是“快进模式”，也就是直接把 master 指向 dev 的当前提交，所以合并速度非常快。</em></p>
<ol>
<li><p>删除分支，使用 <code>git branch -d name</code> 命令。</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git branch <span class="_">-d</span> dev</div><div class="line">Deleted branch dev (was 177508b).</div></pre></td></tr></table></figure>
</li>
<li><p>解决分支冲突</p>
<ul>
<li>创建新的分支 featurel 并修改 README.md 内容后提交修改。</li>
<li>切换到 master 分支并修改一下内容。</li>
<li><p>这种情况下，Git 无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突。   </p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git merge featurel</div><div class="line">Auto-merging README.md</div><div class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> README.md</div><div class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</div></pre></td></tr></table></figure>
</li>
<li><p>查看 readme.md 的文件内容：</p>
<blockquote>
<p>#gitskills<br><br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br><br>Creating a new branch is quick &amp; simple.<br><br> =======<br><br>Creating a new branch is quick AND simple.<br><br>>>>>>>>featurel</p>
</blockquote>
</li>
<li><p>Git 用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，我们修改成“ Creating a new branch is quick and simple.  ”后保存。然后提交。</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">"conflict fixed"</span></div><div class="line">[master b1ebfb2] conflict fixed</div></pre></td></tr></table></figure>
</li>
<li><p>用 <code>git log --graph</code> 命令可以看到分支合并图。</p>
</li>
<li>最后删除分支 featurel 。</li>
</ul>
</li>
</ol>
<h1 id="4-分支管理策略"><a href="#4-分支管理策略" class="headerlink" title="4. 分支管理策略"></a>4. 分支管理策略</h1><ol>
<li><p>在合并分支时，如果使用 <em>–no-ff</em> 方式的 git merge ，Git 就会在 merge 时生成一个新的 commit ，这样，从分支历史上就可以看出分支信息。</p>
<ul>
<li>创建分支 dev ，修改 readme.md 文件内容，并提交 commit 。</li>
<li>切换回 master ，准备合并 dev 分支，请注意 –no-ff 参数，表示禁用 Fast forward 。    <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git merge --no-ff -m <span class="string">"merge with no-ff"</span> dev</div><div class="line">Merge made by the <span class="string">'recursive'</span> strategy.</div><div class="line"> readme.md | 1 +</div><div class="line"> 1 file changed, 1 insertion(+)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>分支策略</p>
</li>
</ol>
<p><em>master 分支必须是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活。工作都在 dev 分支上，也就是说，dev 分支是不稳定的，到某个时候，比如 1.0 版本发布时，再把 dev 分支合并到 master 上，在 master 分支发布 1.0 版本。</em></p>
<ol>
<li><p>当手头工作没有完成时，先把工作现场 git stash 一下，然后去修复 bug ，修复后，可以用 git stash list 查看。想要恢复，一是用 git stash apply 恢复，但是恢复后，stash 内容并不删除，你需要用 git stash drop 来删除；另一种方式是用 git stash pop ，恢复的同时把 stash 内容也删了。</p>
</li>
<li><p>Feature 分支</p>
<ul>
<li>每添加一个新功能，最好新建一个 feature 分支，在上面开发，完成后，合并，最后，删除该 feature 分支。</li>
<li><p>创建新分支,并创建新的文件，然后提交 commit 。</p>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b feature-valcan</div><div class="line">Switched to a new branch <span class="string">'feature-valcan'</span></div></pre></td></tr></table></figure>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git add valcan.md</div><div class="line">$ git status</div><div class="line">On branch feature-valcan</div><div class="line">Changes to be committed:</div><div class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</div><div class="line">new file:   valcan.md</div></pre></td></tr></table></figure>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">"add feature vulcan"</span></div><div class="line">[feature-valcan 34b1ae9] add feature vulcan</div><div class="line"> 1 file changed, 1 insertion(+)</div><div class="line"> create mode 100644 valcan.md</div></pre></td></tr></table></figure>
</li>
<li><p>如果要丢弃一个没有被合并过的分支，可以通过 g<code>it branch -D &lt;name&gt;</code> 强行删除。 </p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git branch -D feature-valcan</div><div class="line">Deleted branch feature-valcan (was 34b1ae9).</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>多人协作</p>
<ul>
<li><p>要查看远程库的信息，用 <code>git remote</code> 。更详细的信息可以使用 <code>gti remote -v</code> 查看。</p>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git remote</div><div class="line">origin</div></pre></td></tr></table></figure>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git remote -v</div><div class="line">origin  git@github.com:jayden-J/learngit.git (fetch)</div><div class="line">origin  git@github.com:jayden-J/learngit.git (push)</div></pre></td></tr></table></figure>
</li>
<li><p>推送分支</p>
<ul>
<li>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，<code>git push origin &lt;branch name&gt;</code>，Git就会把该分支推送到远程库对应的远程分支上.</li>
<li>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？<blockquote>
<p>master分支是主分支，因此要时刻与远程同步；<br><br>dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；<br><br>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；<br><br>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>参考：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">《Git 教程》</a>，by 廖雪峰</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git 学习：git 基本使用]]></title>
      <url>http://blog.jxdjayden.cn/2016/07/29/git/git%E5%AD%A6%E4%B9%A0%E4%B9%8Bgit%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>前段时间根据廖雪峰的 git 教程自学了一遍 git 的使用，同时写了三篇文章记录自己的学习心得，最近新开了 blog，于是把这三篇文章转到这里。</p>
<h1 id="1-windows-下-git-的安装"><a href="#1-windows-下-git-的安装" class="headerlink" title="1. windows 下 git 的安装"></a>1. windows 下 git 的安装</h1><ul>
<li>可以通过 <a href="https://git-scm.com/download/win" target="_blank" rel="external">https://git-scm.com/download/win</a>安装 git，然后打开 Git Bash 即可进行 git 操作。</li>
<li><p>安装完成后需要输入以下命令来完成安装：</p>
<pre><code><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"Your Name"</span></div><div class="line">$ git config --global user.email <span class="string">"email@example.com"</span></div></pre></td></tr></table></figure>
</code></pre><blockquote>
<p>注意：注意 <code>git config</code> 命令的–lobal 参数，用了这个参数，表示你这台机器上所有的 Git 仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和 Email 地址。</p>
</blockquote>
</li>
</ul>
<a id="more"></a>
<h1 id="2-创建版本库-repository"><a href="#2-创建版本库-repository" class="headerlink" title="2. 创建版本库 ( repository )"></a>2. 创建版本库 ( repository )</h1><ol>
<li><p>选择一个合适的地方创建一个空目录：</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ mkdir learngit</div><div class="line">$ <span class="built_in">cd</span> learngit</div><div class="line">$ <span class="built_in">pwd</span></div><div class="line">&lt;!-- /C/Users/J/learngit --&gt;这个是执行<span class="built_in">pwd</span>之后建立目录成功的提示</div></pre></td></tr></table></figure>
</li>
<li><p>通过 <code>git init</code> 命令把这个目录变成 Git 可以管理的仓库：</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git init </div><div class="line">&lt;!-- 成功后会显示：Initialized empty Git repository <span class="keyword">in</span> C:/Users/J/learngit/.git/--&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="3-创建文件并放入-Git-仓库。"><a href="#3-创建文件并放入-Git-仓库。" class="headerlink" title="3. 创建文件并放入 Git 仓库。"></a>3. 创建文件并放入 Git 仓库。</h1><ol>
<li>在 learngit 目录或者子目录下创建文件 readme.md（内容可以随意填写）</li>
<li><p>使用命令 <code>git add</code> 把文件添加到仓库：</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git add readme.md</div><div class="line">&lt;!-- 执行上面的命令，没有任何显示，这就对了。没有消息就是好消息--&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>用命令 <code>git commit -m &quot;提交说明&quot;</code>把文件提交到 Git 仓库： </p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">"wrote a readme file"</span></div><div class="line">[master (root-commit) 7c700be] wrote a readme file</div><div class="line">1 file changed, 2 insertions(+)</div><div class="line">create mode 100644 readme.md</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：commit 可以一次提交很多文件，所以你可以多次 add 不同的文件然后再 commit。</p>
</blockquote>
</li>
</ol>
<h1 id="4-git-仓库状态查看"><a href="#4-git-仓库状态查看" class="headerlink" title="4. git 仓库状态查看"></a>4. git 仓库状态查看</h1><ol>
<li><p>随意修改 readme.md 文件的内容，然后运行 <code>git status</code> 命令：</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">(use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</div><div class="line">(use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</div><div class="line">        modified:   readme.md</div><div class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>git diff</code> 查看具体修改内容</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git diff</div><div class="line">diff --git a/readme.md b/readme.md</div><div class="line">index a44167d..dad5a43 100644</div><div class="line">--- a/readme.md</div><div class="line">+++ b/readme.md</div><div class="line">@@ -1,2 +1,2 @@</div><div class="line">-<span class="comment"># Git is a version control system.</span></div><div class="line">+<span class="comment"># Git is a distributed version control system.</span></div><div class="line"> <span class="comment"># Git is free software.</span></div><div class="line">\ No newline at end of file</div></pre></td></tr></table></figure>
</li>
<li><p>查看最近提交记录，使用 <code>git log</code> 命令，使用 <code>git log --pretty=oneline</code> 可以看到 commit id 。</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span></div><div class="line">commit dddb972b47b06fd278fdce768722488ecb709970</div><div class="line">Author: jayden-J &lt;jxdlinhere@outlook.com&gt;</div><div class="line">Date:   Wed May 11 23:13:47 2016 +0800</div><div class="line">    append GPL</div><div class="line">commit b7b6289f3b852598d397479e26b18dbd0e61a172</div><div class="line">Author: jayden-J &lt;jxdlinhere@outlook.com&gt;</div><div class="line">Date:   Sat May 7 00:15:45 2016 +0800</div><div class="line">    change</div><div class="line">commit 7c700be0d59333b6a61d93aade7d678ee49b7c85</div><div class="line">Author: jayden-J &lt;jxdlinhere@outlook.com&gt;</div><div class="line">Date:   Fri May 6 23:02:23 2016 +0800</div><div class="line">    wrote a readme file</div><div class="line">$ git <span class="built_in">log</span> --pretty=oneline</div><div class="line">dddb972b47b06fd278fdce768722488ecb709970 append GPL</div><div class="line">b7b6289f3b852598d397479e26b18dbd0e61a172 change</div><div class="line">7c700be0d59333b6a61d93aade7d678ee49b7c85 wrote a readme file</div></pre></td></tr></table></figure>
</li>
<li><p>如何回退到以前的版本</p>
<ol>
<li>在 Git 中，用 HEAD 表示当前版本，，上一个版本就是 HEAD^，上上一个版本就是 HEAD^^，往上 100 个版本写 100 个^比较容易数不过来，所以写成 HEAD~100</li>
<li><p>回到上一个版本可以使用 <code>git reset</code> 命令</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard HEAD^</div><div class="line">HEAD is now at b7b6289 change</div></pre></td></tr></table></figure>
</li>
<li><p>回退之后如何恢复原来的新版本呢？只要原来的命令行窗口没有关闭，还可以看得到 “append URL” 的 commit URL；这时候就可以使用 <code>git reset --hard &quot;commit id&quot;</code> 来恢复到之前的版本。</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard dddb972b</div><div class="line">HEAD is now at dddb972 append GPL</div></pre></td></tr></table></figure>
</li>
<li><p>查看命令历史，可以使用 <code>git reflog</code> 。</p>
 <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git reflog</div><div class="line">dddb972 HEAD@&#123;0&#125;: reset: moving to dddb972b</div><div class="line">b7b6289 HEAD@&#123;1&#125;: reset: moving to HEAD^</div><div class="line">dddb972 HEAD@&#123;2&#125;: commit: append GPL</div><div class="line">b7b6289 HEAD@&#123;3&#125;: commit: change</div><div class="line">7c700be HEAD@&#123;4&#125;: commit (initial): wrote a readme file</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<h1 id="5-撤销修改"><a href="#5-撤销修改" class="headerlink" title="5. 撤销修改"></a>5. 撤销修改</h1><ol>
<li><p>在没有添加修改到暂存区前不小心保存了错误的修改，可以使用 <code>git checkout --file</code> 来让文件回到最近一次 <code>git commit</code> 或 <code>git add</code> 时的状态。</p>
<blockquote>
<p>命令 git checkout – readme.md 意思就是，把 readme.md 文件在工作区的修改全部撤销，<br>这里有两种情况：<br>一种是 readme.md 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是 readme.md 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>
</blockquote>
<p> <code>git checkout -- file</code> 命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到 <code>git checkout</code> 命令。</p>
</li>
<li><p>保存了错误的修改并且添加到暂存区了，可以先用命令 <code>git reset HEAD file</code> 把暂存区的修改撤销掉，重新放回工作区；</p>
</li>
</ol>
<h1 id="6-删除文件"><a href="#6-删除文件" class="headerlink" title="6. 删除文件"></a>6. 删除文件</h1><ul>
<li><p>一般情况下，可以直接在文件管理器中把没用的文件删了，或者使用 <code>rm file</code> 命令把文件删除。这时用 <code>git status</code> 命令可以查看哪些文件被删除了。 </p>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">(use <span class="string">"git add/rm &lt;file&gt;..."</span> to update what will be committed)</div><div class="line">(use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</div><div class="line">deleted:    test.txt</div><div class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>现在如果确实要从版本库中删除该文件，可以使用命令 <code>git rm</code> 删除，并且 <code>git commit</code>。</p>
  <figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git rm test.txt</div><div class="line">rm <span class="string">'test.txt'</span></div><div class="line">$ git commit -m <span class="string">"remove test.txt"</span></div><div class="line">[master 7<span class="built_in">cd</span>3de6] remove test.txt</div><div class="line">1 file changed, 1 deletion(-)</div><div class="line">delete mode 100644 test.txt</div></pre></td></tr></table></figure>
</li>
<li><p>另一种情况是删错了，那么可以使用 <code>git checkout</code> 命令来恢复误删的文件。</p>
</li>
</ul>
<blockquote>
<p>参考：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">《Git 教程》</a>，by 廖雪峰</p>
</blockquote>
]]></content>
    </entry>
    
  
  
</search>
